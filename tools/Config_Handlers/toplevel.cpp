/*
 * This code was generated by the XML Schema Compiler.
 *
 * Changes made to this code will most likely be overwritten
 * when the handlers are recompiled.
 *
 * If you find errors or feel that there are bugfixes to be made,
 * please report this to the XSC project at
 * https://github.com/DOCGroup/XSC
 */
#include "toplevel.hpp"

#include "ace/ace_wchar.h"
#include "ace/Null_Mutex.h"
#include "ace/TSS_T.h"
#include "ace/Singleton.h"

namespace DAnCE
{
  namespace Config_Handlers
  {
    // TopLevelPackageDescription

    TopLevelPackageDescription::TopLevelPackageDescription ()
    : ::XSCRT::Type ()
    {
    }

    TopLevelPackageDescription::TopLevelPackageDescription (TopLevelPackageDescription const& s) :
    ::XSCRT::Type (s)
    , package_ (s.package_)
    {
    }

    TopLevelPackageDescription&
    TopLevelPackageDescription::operator= (TopLevelPackageDescription const& s)
    {
      if (&s != this)
      {
        package_ = s.package_;
      }

      return *this;
    }


    // TopLevelPackageDescription
    TopLevelPackageDescription::package_iterator TopLevelPackageDescription::
    begin_package ()
    {
      return package_.begin ();
    }

    TopLevelPackageDescription::package_iterator TopLevelPackageDescription::
    end_package ()
    {
      return package_.end ();
    }

    TopLevelPackageDescription::package_const_iterator TopLevelPackageDescription::
    begin_package () const
    {
      return package_.begin ();
    }

    TopLevelPackageDescription::package_const_iterator TopLevelPackageDescription::
    end_package () const
    {
      return package_.end ();
    }

    void TopLevelPackageDescription::
    add_package (TopLevelPackageDescription::package_value_type const& e)
    {
      package_.push_back (e);
    }

    size_t TopLevelPackageDescription::
    count_package(void) const
    {
      return package_.size ();
    }
  }
}

namespace DAnCE
{
  namespace Config_Handlers
  {
    // TopLevelPackageDescription

    TopLevelPackageDescription::
    TopLevelPackageDescription (::XSCRT::XML::Element<ACE_TCHAR> const& e)
    :Base (e)
    {

      ::XSCRT::Parser<ACE_TCHAR> p (e);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element<ACE_TCHAR> e (p.next_element ());
        std::basic_string<ACE_TCHAR> n (::XSCRT::XML::uq_name (e.name ()));

        if (n == ACE_TEXT("package"))
        {
          package_value_type t (new ::DAnCE::Config_Handlers::PackageConfiguration (e));
          add_package (t);
        }

        else
        {
        }
      }
    }
  }
}

namespace DAnCE
{
  namespace Config_Handlers
  {
  }
}

