/*
 * This code was generated by the XML Schema Compiler.
 *
 * Changes made to this code will most likely be overwritten
 * when the handlers are recompiled.
 *
 * If you find errors or feel that there are bugfixes to be made,
 * please report this to the XSC project at
 * https://github.com/DOCGroup/XSC
 */
#ifndef CDP_HPP
#define CDP_HPP

#include "XSC_XML_Handlers_Export.h"
// Forward declarations.
namespace DAnCE
{
  namespace Config_Handlers
  {
    class PlanSubcomponentPropertyReference;
    class PlanPropertyMapping;
    class deploymentPlan;
  }
}

#include <memory>
#include <string>
#include <list>
#include "ace/XML_Utils/XMLSchema/Types.hpp"
#include "ace/XML_Utils/XMLSchema/id_map.hpp"
#include "ace/Refcounted_Auto_Ptr.h"
#include "ace/Null_Mutex.h"
#include "ace/ace_wchar.h"

#include "ccd.hpp"

namespace DAnCE
{
  namespace Config_Handlers
  {
    class XSC_XML_Handlers_Export PlanSubcomponentPropertyReference : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::PlanSubcomponentPropertyReference, ACE_Null_Mutex> _ptr;

      // propertyName
      public:
      ::XMLSchema::string<ACE_TCHAR> const& propertyName () const;
      void propertyName (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > propertyName_auto_ptr_type;
      propertyName_auto_ptr_type propertyName_;

      // instance
      public:
      ::DAnCE::Config_Handlers::InstanceDeploymentDescription const& instance () const;
      void instance (::DAnCE::Config_Handlers::InstanceDeploymentDescription const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::InstanceDeploymentDescription > instance_auto_ptr_type;
      instance_auto_ptr_type instance_;

      public:
      PlanSubcomponentPropertyReference (::XMLSchema::string<ACE_TCHAR> const& propertyName__,
                                         ::DAnCE::Config_Handlers::InstanceDeploymentDescription const& instance__);

      explicit PlanSubcomponentPropertyReference (::XSCRT::XML::Element<ACE_TCHAR> const&);
      PlanSubcomponentPropertyReference (PlanSubcomponentPropertyReference const& s);
      PlanSubcomponentPropertyReference& operator= (PlanSubcomponentPropertyReference const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export PlanPropertyMapping : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::PlanPropertyMapping, ACE_Null_Mutex> _ptr;

      // name
      public:
      ::XMLSchema::string<ACE_TCHAR> const& name () const;
      void name (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > name_auto_ptr_type;
      name_auto_ptr_type name_;

      // source
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::XMLSchema::string<ACE_TCHAR>, ACE_Null_Mutex> source_value_type;
      typedef std::list<source_value_type> source_container_type;
      typedef source_container_type::iterator source_iterator;
      typedef source_container_type::const_iterator source_const_iterator;
      source_iterator begin_source ();
      source_iterator end_source ();
      source_const_iterator begin_source () const;
      source_const_iterator end_source () const;
      void add_source (source_value_type const&);
      size_t count_source () const;

      protected:
      source_container_type source_;

      // externalName
      public:
      ::XMLSchema::string<ACE_TCHAR> const& externalName () const;
      void externalName (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > externalName_auto_ptr_type;
      externalName_auto_ptr_type externalName_;

      // delegatesTo
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::PlanSubcomponentPropertyReference, ACE_Null_Mutex> delegatesTo_value_type;
      typedef std::list<delegatesTo_value_type> delegatesTo_container_type;
      typedef delegatesTo_container_type::iterator delegatesTo_iterator;
      typedef delegatesTo_container_type::const_iterator delegatesTo_const_iterator;
      delegatesTo_iterator begin_delegatesTo ();
      delegatesTo_iterator end_delegatesTo ();
      delegatesTo_const_iterator begin_delegatesTo () const;
      delegatesTo_const_iterator end_delegatesTo () const;
      void add_delegatesTo (delegatesTo_value_type const&);
      size_t count_delegatesTo () const;

      protected:
      delegatesTo_container_type delegatesTo_;

      public:
      PlanPropertyMapping (::XMLSchema::string<ACE_TCHAR> const& name__,
                           ::XMLSchema::string<ACE_TCHAR> const& externalName__,
                           delegatesTo_container_type const& delegatesTo__);

      explicit PlanPropertyMapping (::XSCRT::XML::Element<ACE_TCHAR> const&);
      PlanPropertyMapping (PlanPropertyMapping const& s);
      PlanPropertyMapping& operator= (PlanPropertyMapping const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export deploymentPlan : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::deploymentPlan, ACE_Null_Mutex> _ptr;

      // label
      public:
      bool label_p () const;
      ::XMLSchema::string<ACE_TCHAR> const& label () const;
      void label (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > label_auto_ptr_type;
      label_auto_ptr_type label_;

      // UUID
      public:
      bool UUID_p () const;
      ::XMLSchema::string<ACE_TCHAR> const& UUID () const;
      void UUID (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > UUID_auto_ptr_type;
      UUID_auto_ptr_type UUID_;

      // realizes
      public:
      bool realizes_p () const;
      ::DAnCE::Config_Handlers::ComponentInterfaceDescription const& realizes () const;
      void realizes (::DAnCE::Config_Handlers::ComponentInterfaceDescription const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::ComponentInterfaceDescription > realizes_auto_ptr_type;
      realizes_auto_ptr_type realizes_;

      // implementation
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::MonolithicDeploymentDescription, ACE_Null_Mutex> implementation_value_type;
      typedef std::list<implementation_value_type> implementation_container_type;
      typedef implementation_container_type::iterator implementation_iterator;
      typedef implementation_container_type::const_iterator implementation_const_iterator;
      implementation_iterator begin_implementation ();
      implementation_iterator end_implementation ();
      implementation_const_iterator begin_implementation () const;
      implementation_const_iterator end_implementation () const;
      void add_implementation (implementation_value_type const&);
      size_t count_implementation () const;

      protected:
      implementation_container_type implementation_;

      // instance
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::InstanceDeploymentDescription, ACE_Null_Mutex> instance_value_type;
      typedef std::list<instance_value_type> instance_container_type;
      typedef instance_container_type::iterator instance_iterator;
      typedef instance_container_type::const_iterator instance_const_iterator;
      instance_iterator begin_instance ();
      instance_iterator end_instance ();
      instance_const_iterator begin_instance () const;
      instance_const_iterator end_instance () const;
      void add_instance (instance_value_type const&);
      size_t count_instance () const;

      protected:
      instance_container_type instance_;

      // connection
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::PlanConnectionDescription, ACE_Null_Mutex> connection_value_type;
      typedef std::list<connection_value_type> connection_container_type;
      typedef connection_container_type::iterator connection_iterator;
      typedef connection_container_type::const_iterator connection_const_iterator;
      connection_iterator begin_connection ();
      connection_iterator end_connection ();
      connection_const_iterator begin_connection () const;
      connection_const_iterator end_connection () const;
      void add_connection (connection_value_type const&);
      size_t count_connection () const;

      protected:
      connection_container_type connection_;

      // externalProperty
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::PlanPropertyMapping, ACE_Null_Mutex> externalProperty_value_type;
      typedef std::list<externalProperty_value_type> externalProperty_container_type;
      typedef externalProperty_container_type::iterator externalProperty_iterator;
      typedef externalProperty_container_type::const_iterator externalProperty_const_iterator;
      externalProperty_iterator begin_externalProperty ();
      externalProperty_iterator end_externalProperty ();
      externalProperty_const_iterator begin_externalProperty () const;
      externalProperty_const_iterator end_externalProperty () const;
      void add_externalProperty (externalProperty_value_type const&);
      size_t count_externalProperty () const;

      protected:
      externalProperty_container_type externalProperty_;

      // dependsOn
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::ImplementationDependency, ACE_Null_Mutex> dependsOn_value_type;
      typedef std::list<dependsOn_value_type> dependsOn_container_type;
      typedef dependsOn_container_type::iterator dependsOn_iterator;
      typedef dependsOn_container_type::const_iterator dependsOn_const_iterator;
      dependsOn_iterator begin_dependsOn ();
      dependsOn_iterator end_dependsOn ();
      dependsOn_const_iterator begin_dependsOn () const;
      dependsOn_const_iterator end_dependsOn () const;
      void add_dependsOn (dependsOn_value_type const&);
      size_t count_dependsOn () const;

      protected:
      dependsOn_container_type dependsOn_;

      // artifact
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::ArtifactDeploymentDescription, ACE_Null_Mutex> artifact_value_type;
      typedef std::list<artifact_value_type> artifact_container_type;
      typedef artifact_container_type::iterator artifact_iterator;
      typedef artifact_container_type::const_iterator artifact_const_iterator;
      artifact_iterator begin_artifact ();
      artifact_iterator end_artifact ();
      artifact_const_iterator begin_artifact () const;
      artifact_const_iterator end_artifact () const;
      void add_artifact (artifact_value_type const&);
      size_t count_artifact () const;

      protected:
      artifact_container_type artifact_;

      // infoProperty
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Property, ACE_Null_Mutex> infoProperty_value_type;
      typedef std::list<infoProperty_value_type> infoProperty_container_type;
      typedef infoProperty_container_type::iterator infoProperty_iterator;
      typedef infoProperty_container_type::const_iterator infoProperty_const_iterator;
      infoProperty_iterator begin_infoProperty ();
      infoProperty_iterator end_infoProperty ();
      infoProperty_const_iterator begin_infoProperty () const;
      infoProperty_const_iterator end_infoProperty () const;
      void add_infoProperty (infoProperty_value_type const&);
      size_t count_infoProperty () const;

      protected:
      infoProperty_container_type infoProperty_;

      // localityConstraint
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::PlanLocality, ACE_Null_Mutex> localityConstraint_value_type;
      typedef std::list<localityConstraint_value_type> localityConstraint_container_type;
      typedef localityConstraint_container_type::iterator localityConstraint_iterator;
      typedef localityConstraint_container_type::const_iterator localityConstraint_const_iterator;
      localityConstraint_iterator begin_localityConstraint ();
      localityConstraint_iterator end_localityConstraint ();
      localityConstraint_const_iterator begin_localityConstraint () const;
      localityConstraint_const_iterator end_localityConstraint () const;
      void add_localityConstraint (localityConstraint_value_type const&);
      size_t count_localityConstraint () const;

      protected:
      localityConstraint_container_type localityConstraint_;

      public:
      deploymentPlan ();

      explicit deploymentPlan (::XSCRT::XML::Element<ACE_TCHAR> const&);
      deploymentPlan (deploymentPlan const& s);
      deploymentPlan& operator= (deploymentPlan const& s);

      private:
      char regulator__;
    };
  }
}

namespace DAnCE
{
  namespace Config_Handlers
  {
  }
}

#include "ace/XML_Utils/XMLSchema/Traversal.hpp"

namespace DAnCE
{
  namespace Config_Handlers
  {
    namespace Traversal
    {
      struct XSC_XML_Handlers_Export PlanSubcomponentPropertyReference : ::XMLSchema::Traversal::Traverser< ::DAnCE::Config_Handlers::PlanSubcomponentPropertyReference >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        propertyName (Type&);

        virtual void
        propertyName (Type const&);

        virtual void
        instance (Type&);

        virtual void
        instance (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export PlanPropertyMapping : ::XMLSchema::Traversal::Traverser< ::DAnCE::Config_Handlers::PlanPropertyMapping >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        name (Type&);

        virtual void
        name (Type const&);

        virtual void
        source (Type&);

        virtual void
        source (Type const&);

        virtual void
        source_pre (Type&);

        virtual void
        source_pre (Type const&);

        virtual void
        source_next (Type&);

        virtual void
        source_next (Type const&);

        virtual void
        source_post (Type&);

        virtual void
        source_post (Type const&);

        virtual void
        source_none (Type&);

        virtual void
        source_none (Type const&);

        virtual void
        externalName (Type&);

        virtual void
        externalName (Type const&);

        virtual void
        delegatesTo (Type&);

        virtual void
        delegatesTo (Type const&);

        virtual void
        delegatesTo_pre (Type&);

        virtual void
        delegatesTo_pre (Type const&);

        virtual void
        delegatesTo_next (Type&);

        virtual void
        delegatesTo_next (Type const&);

        virtual void
        delegatesTo_post (Type&);

        virtual void
        delegatesTo_post (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct XSC_XML_Handlers_Export deploymentPlan : ::XMLSchema::Traversal::Traverser< ::DAnCE::Config_Handlers::deploymentPlan >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        label (Type&);

        virtual void
        label (Type const&);

        virtual void
        label_none (Type&);

        virtual void
        label_none (Type const&);

        virtual void
        UUID (Type&);

        virtual void
        UUID (Type const&);

        virtual void
        UUID_none (Type&);

        virtual void
        UUID_none (Type const&);

        virtual void
        realizes (Type&);

        virtual void
        realizes (Type const&);

        virtual void
        realizes_none (Type&);

        virtual void
        realizes_none (Type const&);

        virtual void
        implementation (Type&);

        virtual void
        implementation (Type const&);

        virtual void
        implementation_pre (Type&);

        virtual void
        implementation_pre (Type const&);

        virtual void
        implementation_next (Type&);

        virtual void
        implementation_next (Type const&);

        virtual void
        implementation_post (Type&);

        virtual void
        implementation_post (Type const&);

        virtual void
        implementation_none (Type&);

        virtual void
        implementation_none (Type const&);

        virtual void
        instance (Type&);

        virtual void
        instance (Type const&);

        virtual void
        instance_pre (Type&);

        virtual void
        instance_pre (Type const&);

        virtual void
        instance_next (Type&);

        virtual void
        instance_next (Type const&);

        virtual void
        instance_post (Type&);

        virtual void
        instance_post (Type const&);

        virtual void
        instance_none (Type&);

        virtual void
        instance_none (Type const&);

        virtual void
        connection (Type&);

        virtual void
        connection (Type const&);

        virtual void
        connection_pre (Type&);

        virtual void
        connection_pre (Type const&);

        virtual void
        connection_next (Type&);

        virtual void
        connection_next (Type const&);

        virtual void
        connection_post (Type&);

        virtual void
        connection_post (Type const&);

        virtual void
        connection_none (Type&);

        virtual void
        connection_none (Type const&);

        virtual void
        externalProperty (Type&);

        virtual void
        externalProperty (Type const&);

        virtual void
        externalProperty_pre (Type&);

        virtual void
        externalProperty_pre (Type const&);

        virtual void
        externalProperty_next (Type&);

        virtual void
        externalProperty_next (Type const&);

        virtual void
        externalProperty_post (Type&);

        virtual void
        externalProperty_post (Type const&);

        virtual void
        externalProperty_none (Type&);

        virtual void
        externalProperty_none (Type const&);

        virtual void
        dependsOn (Type&);

        virtual void
        dependsOn (Type const&);

        virtual void
        dependsOn_pre (Type&);

        virtual void
        dependsOn_pre (Type const&);

        virtual void
        dependsOn_next (Type&);

        virtual void
        dependsOn_next (Type const&);

        virtual void
        dependsOn_post (Type&);

        virtual void
        dependsOn_post (Type const&);

        virtual void
        dependsOn_none (Type&);

        virtual void
        dependsOn_none (Type const&);

        virtual void
        artifact (Type&);

        virtual void
        artifact (Type const&);

        virtual void
        artifact_pre (Type&);

        virtual void
        artifact_pre (Type const&);

        virtual void
        artifact_next (Type&);

        virtual void
        artifact_next (Type const&);

        virtual void
        artifact_post (Type&);

        virtual void
        artifact_post (Type const&);

        virtual void
        artifact_none (Type&);

        virtual void
        artifact_none (Type const&);

        virtual void
        infoProperty (Type&);

        virtual void
        infoProperty (Type const&);

        virtual void
        infoProperty_pre (Type&);

        virtual void
        infoProperty_pre (Type const&);

        virtual void
        infoProperty_next (Type&);

        virtual void
        infoProperty_next (Type const&);

        virtual void
        infoProperty_post (Type&);

        virtual void
        infoProperty_post (Type const&);

        virtual void
        infoProperty_none (Type&);

        virtual void
        infoProperty_none (Type const&);

        virtual void
        localityConstraint (Type&);

        virtual void
        localityConstraint (Type const&);

        virtual void
        localityConstraint_pre (Type&);

        virtual void
        localityConstraint_pre (Type const&);

        virtual void
        localityConstraint_next (Type&);

        virtual void
        localityConstraint_next (Type const&);

        virtual void
        localityConstraint_post (Type&);

        virtual void
        localityConstraint_post (Type const&);

        virtual void
        localityConstraint_none (Type&);

        virtual void
        localityConstraint_none (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };
    }
  }
}

#include "ace/XML_Utils/XMLSchema/Writer.hpp"

namespace DAnCE
{
  namespace Config_Handlers
  {
    namespace Writer
    {
      struct PlanSubcomponentPropertyReference : Traversal::PlanSubcomponentPropertyReference,
      virtual ::XSCRT::Writer<ACE_TCHAR>
      {
        typedef ::DAnCE::Config_Handlers::PlanSubcomponentPropertyReference Type;
        explicit PlanSubcomponentPropertyReference (::XSCRT::XML::Element<ACE_TCHAR>&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        propertyName (Type &o)
        {
          this->propertyName (const_cast <Type const &> (o));
        }

        virtual void
        propertyName (Type const&);

        virtual void
        instance (Type &o)
        {
          this->instance (const_cast <Type const &> (o));
        }

        virtual void
        instance (Type const&);

        protected:
        PlanSubcomponentPropertyReference ();
      };

      struct PlanPropertyMapping : Traversal::PlanPropertyMapping,
      virtual ::XSCRT::Writer<ACE_TCHAR>
      {
        typedef ::DAnCE::Config_Handlers::PlanPropertyMapping Type;
        explicit PlanPropertyMapping (::XSCRT::XML::Element<ACE_TCHAR>&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        name (Type &o)
        {
          this->name (const_cast <Type const &> (o));
        }

        virtual void
        name (Type const&);

        virtual void
        source_pre (Type &o)
        {
          this->source_pre (const_cast <Type const &> (o));
        }

        virtual void
        source_pre (Type const&);

        virtual void
        source_next (Type &o)
        {
          this->source_next (const_cast <Type const &> (o));
        }

        virtual void
        source_next (Type const&);

        virtual void
        source_post (Type &o)
        {
          this->source_post (const_cast <Type const &> (o));
        }

        virtual void
        source_post (Type const&);

        virtual void
        externalName (Type &o)
        {
          this->externalName (const_cast <Type const &> (o));
        }

        virtual void
        externalName (Type const&);

        virtual void
        delegatesTo_pre (Type &o)
        {
          this->delegatesTo_pre (const_cast <Type const &> (o));
        }

        virtual void
        delegatesTo_pre (Type const&);

        virtual void
        delegatesTo_next (Type &o)
        {
          this->delegatesTo_next (const_cast <Type const &> (o));
        }

        virtual void
        delegatesTo_next (Type const&);

        virtual void
        delegatesTo_post (Type &o)
        {
          this->delegatesTo_post (const_cast <Type const &> (o));
        }

        virtual void
        delegatesTo_post (Type const&);

        protected:
        PlanPropertyMapping ();
      };

      struct deploymentPlan : Traversal::deploymentPlan,
      virtual ::XSCRT::Writer<ACE_TCHAR>
      {
        typedef ::DAnCE::Config_Handlers::deploymentPlan Type;
        explicit deploymentPlan (::XSCRT::XML::Element<ACE_TCHAR>&);

        virtual void
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        virtual void
        label (Type &o)
        {
          this->label (const_cast <Type const &> (o));
        }

        virtual void
        label (Type const&);

        virtual void
        UUID (Type &o)
        {
          this->UUID (const_cast <Type const &> (o));
        }

        virtual void
        UUID (Type const&);

        virtual void
        realizes (Type &o)
        {
          this->realizes (const_cast <Type const &> (o));
        }

        virtual void
        realizes (Type const&);

        virtual void
        implementation_pre (Type &o)
        {
          this->implementation_pre (const_cast <Type const &> (o));
        }

        virtual void
        implementation_pre (Type const&);

        virtual void
        implementation_next (Type &o)
        {
          this->implementation_next (const_cast <Type const &> (o));
        }

        virtual void
        implementation_next (Type const&);

        virtual void
        implementation_post (Type &o)
        {
          this->implementation_post (const_cast <Type const &> (o));
        }

        virtual void
        implementation_post (Type const&);

        virtual void
        instance_pre (Type &o)
        {
          this->instance_pre (const_cast <Type const &> (o));
        }

        virtual void
        instance_pre (Type const&);

        virtual void
        instance_next (Type &o)
        {
          this->instance_next (const_cast <Type const &> (o));
        }

        virtual void
        instance_next (Type const&);

        virtual void
        instance_post (Type &o)
        {
          this->instance_post (const_cast <Type const &> (o));
        }

        virtual void
        instance_post (Type const&);

        virtual void
        connection_pre (Type &o)
        {
          this->connection_pre (const_cast <Type const &> (o));
        }

        virtual void
        connection_pre (Type const&);

        virtual void
        connection_next (Type &o)
        {
          this->connection_next (const_cast <Type const &> (o));
        }

        virtual void
        connection_next (Type const&);

        virtual void
        connection_post (Type &o)
        {
          this->connection_post (const_cast <Type const &> (o));
        }

        virtual void
        connection_post (Type const&);

        virtual void
        externalProperty_pre (Type &o)
        {
          this->externalProperty_pre (const_cast <Type const &> (o));
        }

        virtual void
        externalProperty_pre (Type const&);

        virtual void
        externalProperty_next (Type &o)
        {
          this->externalProperty_next (const_cast <Type const &> (o));
        }

        virtual void
        externalProperty_next (Type const&);

        virtual void
        externalProperty_post (Type &o)
        {
          this->externalProperty_post (const_cast <Type const &> (o));
        }

        virtual void
        externalProperty_post (Type const&);

        virtual void
        dependsOn_pre (Type &o)
        {
          this->dependsOn_pre (const_cast <Type const &> (o));
        }

        virtual void
        dependsOn_pre (Type const&);

        virtual void
        dependsOn_next (Type &o)
        {
          this->dependsOn_next (const_cast <Type const &> (o));
        }

        virtual void
        dependsOn_next (Type const&);

        virtual void
        dependsOn_post (Type &o)
        {
          this->dependsOn_post (const_cast <Type const &> (o));
        }

        virtual void
        dependsOn_post (Type const&);

        virtual void
        artifact_pre (Type &o)
        {
          this->artifact_pre (const_cast <Type const &> (o));
        }

        virtual void
        artifact_pre (Type const&);

        virtual void
        artifact_next (Type &o)
        {
          this->artifact_next (const_cast <Type const &> (o));
        }

        virtual void
        artifact_next (Type const&);

        virtual void
        artifact_post (Type &o)
        {
          this->artifact_post (const_cast <Type const &> (o));
        }

        virtual void
        artifact_post (Type const&);

        virtual void
        infoProperty_pre (Type &o)
        {
          this->infoProperty_pre (const_cast <Type const &> (o));
        }

        virtual void
        infoProperty_pre (Type const&);

        virtual void
        infoProperty_next (Type &o)
        {
          this->infoProperty_next (const_cast <Type const &> (o));
        }

        virtual void
        infoProperty_next (Type const&);

        virtual void
        infoProperty_post (Type &o)
        {
          this->infoProperty_post (const_cast <Type const &> (o));
        }

        virtual void
        infoProperty_post (Type const&);

        virtual void
        localityConstraint_pre (Type &o)
        {
          this->localityConstraint_pre (const_cast <Type const &> (o));
        }

        virtual void
        localityConstraint_pre (Type const&);

        virtual void
        localityConstraint_next (Type &o)
        {
          this->localityConstraint_next (const_cast <Type const &> (o));
        }

        virtual void
        localityConstraint_next (Type const&);

        virtual void
        localityConstraint_post (Type &o)
        {
          this->localityConstraint_post (const_cast <Type const &> (o));
        }

        virtual void
        localityConstraint_post (Type const&);

        protected:
        deploymentPlan ();
      };
    }
  }
}

namespace DAnCE
{
  namespace Config_Handlers
  {
  }
}

#endif // CDP_HPP
