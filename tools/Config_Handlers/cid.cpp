/*
 * This code was generated by the XML Schema Compiler.
 *
 * Changes made to this code will most likely be overwritten
 * when the handlers are recompiled.
 *
 * If you find errors or feel that there are bugfixes to be made,
 * please report this to the XSC project at
 * https://github.com/DOCGroup/XSC
 */
#include "cid.hpp"

#include "ace/Null_Mutex.h"
#include "ace/TSS_T.h"
#include "ace/ace_wchar.h"
#include "ace/Singleton.h"

namespace DAnCE
{
  namespace Config_Handlers
  {
    // ComponentPackageReference

    ComponentPackageReference::ComponentPackageReference (::DAnCE::Config_Handlers::ComponentInterfaceDescription const& requiredType__) :
    ::XSCRT::Type (),
    requiredType_ (new ::DAnCE::Config_Handlers::ComponentInterfaceDescription (requiredType__)),
    regulator__ ()
    {
      requiredType_->container (this);
    }

    ComponentPackageReference::ComponentPackageReference (ComponentPackageReference const& s) :
    ::XSCRT::Type (s),
    requiredUUID_ (s.requiredUUID_.get () ? new ::XMLSchema::string<ACE_TCHAR> (*s.requiredUUID_) : 0),
    requiredName_ (s.requiredName_.get () ? new ::XMLSchema::string<ACE_TCHAR> (*s.requiredName_) : 0),
    requiredType_ (new ::DAnCE::Config_Handlers::ComponentInterfaceDescription (*s.requiredType_)),
    regulator__ ()
    {
      if (requiredUUID_.get ()) requiredUUID_->container (this);
      if (requiredName_.get ()) requiredName_->container (this);
      requiredType_->container (this);
    }

    ComponentPackageReference&
    ComponentPackageReference::operator= (ComponentPackageReference const& s)
    {
      if (&s != this)
      {
        if (s.requiredUUID_.get ())
          requiredUUID (*(s.requiredUUID_));
        else
          requiredUUID_.reset (0);

        if (s.requiredName_.get ())
          requiredName (*(s.requiredName_));
        else
          requiredName_.reset (0);

        requiredType (*s.requiredType_);
      }

      return *this;
    }


    // ComponentPackageReference
    bool ComponentPackageReference::
    requiredUUID_p () const
    {
      return requiredUUID_.get () != 0;
    }

    ::XMLSchema::string<ACE_TCHAR> const& ComponentPackageReference::
    requiredUUID () const
    {
      return *requiredUUID_;
    }

    void ComponentPackageReference::
    requiredUUID (::XMLSchema::string<ACE_TCHAR> const& e)
    {
      if (requiredUUID_.get ())
      {
        *requiredUUID_ = e;
      }

      else
      {
        requiredUUID_ = ComponentPackageReference::requiredUUID_auto_ptr_type (new ::XMLSchema::string<ACE_TCHAR> (e));
        requiredUUID_->container (this);
      }
    }

    // ComponentPackageReference
    bool ComponentPackageReference::
    requiredName_p () const
    {
      return requiredName_.get () != 0;
    }

    ::XMLSchema::string<ACE_TCHAR> const& ComponentPackageReference::
    requiredName () const
    {
      return *requiredName_;
    }

    void ComponentPackageReference::
    requiredName (::XMLSchema::string<ACE_TCHAR> const& e)
    {
      if (requiredName_.get ())
      {
        *requiredName_ = e;
      }

      else
      {
        requiredName_ = ComponentPackageReference::requiredName_auto_ptr_type (new ::XMLSchema::string<ACE_TCHAR> (e));
        requiredName_->container (this);
      }
    }

    // ComponentPackageReference
    ::DAnCE::Config_Handlers::ComponentInterfaceDescription const& ComponentPackageReference::
    requiredType () const
    {
      return *requiredType_;
    }

    void ComponentPackageReference::
    requiredType (::DAnCE::Config_Handlers::ComponentInterfaceDescription const& e)
    {
      *requiredType_ = e;
    }


    // SubcomponentInstantiationDescription

    SubcomponentInstantiationDescription::SubcomponentInstantiationDescription (::XMLSchema::string<ACE_TCHAR> const& name__) :
    ::XSCRT::Type (),
    name_ (new ::XMLSchema::string<ACE_TCHAR> (name__)),
    regulator__ ()
    {
      name_->container (this);
    }

    SubcomponentInstantiationDescription::SubcomponentInstantiationDescription (SubcomponentInstantiationDescription const& s) :
    ::XSCRT::Type (s),
    name_ (new ::XMLSchema::string<ACE_TCHAR> (*s.name_)),
    basePackage_ (s.basePackage_.get () ? new ::DAnCE::Config_Handlers::ComponentPackageDescription (*s.basePackage_) : 0),
    specializedConfig_ (s.specializedConfig_.get () ? new ::DAnCE::Config_Handlers::PackageConfiguration (*s.specializedConfig_) : 0),
    selectRequirement_ (s.selectRequirement_),
    configProperty_ (s.configProperty_),
    referencedPackage_ (s.referencedPackage_.get () ? new ::DAnCE::Config_Handlers::ComponentPackageReference (*s.referencedPackage_) : 0),
    importedPackage_ (s.importedPackage_.get () ? new ::DAnCE::Config_Handlers::ComponentPackageImport (*s.importedPackage_) : 0),
    id_ (s.id_.get () ? new ::XMLSchema::ID<ACE_TCHAR> (*s.id_) : 0),
    regulator__ ()
    {
      name_->container (this);
      if (basePackage_.get ()) basePackage_->container (this);
      if (specializedConfig_.get ()) specializedConfig_->container (this);
      if (referencedPackage_.get ()) referencedPackage_->container (this);
      if (importedPackage_.get ()) importedPackage_->container (this);
      if (id_.get ()) id_->container (this);
    }

    SubcomponentInstantiationDescription&
    SubcomponentInstantiationDescription::operator= (SubcomponentInstantiationDescription const& s)
    {
      if (&s != this)
      {
        name (*s.name_);

        if (s.basePackage_.get ())
          basePackage (*(s.basePackage_));
        else
          basePackage_.reset (0);

        if (s.specializedConfig_.get ())
          specializedConfig (*(s.specializedConfig_));
        else
          specializedConfig_.reset (0);

        selectRequirement_ = s.selectRequirement_;

        configProperty_ = s.configProperty_;

        if (s.referencedPackage_.get ())
          referencedPackage (*(s.referencedPackage_));
        else
          referencedPackage_.reset (0);

        if (s.importedPackage_.get ())
          importedPackage (*(s.importedPackage_));
        else
          importedPackage_.reset (0);

        if (s.id_.get ()) id (*(s.id_));
        else id_.reset (0);
      }

      return *this;
    }


    // SubcomponentInstantiationDescription
    ::XMLSchema::string<ACE_TCHAR> const& SubcomponentInstantiationDescription::
    name () const
    {
      return *name_;
    }

    void SubcomponentInstantiationDescription::
    name (::XMLSchema::string<ACE_TCHAR> const& e)
    {
      *name_ = e;
    }

    // SubcomponentInstantiationDescription
    bool SubcomponentInstantiationDescription::
    basePackage_p () const
    {
      return basePackage_.get () != 0;
    }

    ::DAnCE::Config_Handlers::ComponentPackageDescription const& SubcomponentInstantiationDescription::
    basePackage () const
    {
      return *basePackage_;
    }

    void SubcomponentInstantiationDescription::
    basePackage (::DAnCE::Config_Handlers::ComponentPackageDescription const& e)
    {
      if (basePackage_.get ())
      {
        *basePackage_ = e;
      }

      else
      {
        basePackage_ = SubcomponentInstantiationDescription::basePackage_auto_ptr_type (new ::DAnCE::Config_Handlers::ComponentPackageDescription (e));
        basePackage_->container (this);
      }
    }

    // SubcomponentInstantiationDescription
    bool SubcomponentInstantiationDescription::
    specializedConfig_p () const
    {
      return specializedConfig_.get () != 0;
    }

    ::DAnCE::Config_Handlers::PackageConfiguration const& SubcomponentInstantiationDescription::
    specializedConfig () const
    {
      return *specializedConfig_;
    }

    void SubcomponentInstantiationDescription::
    specializedConfig (::DAnCE::Config_Handlers::PackageConfiguration const& e)
    {
      if (specializedConfig_.get ())
      {
        *specializedConfig_ = e;
      }

      else
      {
        specializedConfig_ = SubcomponentInstantiationDescription::specializedConfig_auto_ptr_type (new ::DAnCE::Config_Handlers::PackageConfiguration (e));
        specializedConfig_->container (this);
      }
    }

    // SubcomponentInstantiationDescription
    SubcomponentInstantiationDescription::selectRequirement_iterator SubcomponentInstantiationDescription::
    begin_selectRequirement ()
    {
      return selectRequirement_.begin ();
    }

    SubcomponentInstantiationDescription::selectRequirement_iterator SubcomponentInstantiationDescription::
    end_selectRequirement ()
    {
      return selectRequirement_.end ();
    }

    SubcomponentInstantiationDescription::selectRequirement_const_iterator SubcomponentInstantiationDescription::
    begin_selectRequirement () const
    {
      return selectRequirement_.begin ();
    }

    SubcomponentInstantiationDescription::selectRequirement_const_iterator SubcomponentInstantiationDescription::
    end_selectRequirement () const
    {
      return selectRequirement_.end ();
    }

    void SubcomponentInstantiationDescription::
    add_selectRequirement (SubcomponentInstantiationDescription::selectRequirement_value_type const& e)
    {
      selectRequirement_.push_back (e);
    }

    size_t SubcomponentInstantiationDescription::
    count_selectRequirement(void) const
    {
      return selectRequirement_.size ();
    }

    // SubcomponentInstantiationDescription
    SubcomponentInstantiationDescription::configProperty_iterator SubcomponentInstantiationDescription::
    begin_configProperty ()
    {
      return configProperty_.begin ();
    }

    SubcomponentInstantiationDescription::configProperty_iterator SubcomponentInstantiationDescription::
    end_configProperty ()
    {
      return configProperty_.end ();
    }

    SubcomponentInstantiationDescription::configProperty_const_iterator SubcomponentInstantiationDescription::
    begin_configProperty () const
    {
      return configProperty_.begin ();
    }

    SubcomponentInstantiationDescription::configProperty_const_iterator SubcomponentInstantiationDescription::
    end_configProperty () const
    {
      return configProperty_.end ();
    }

    void SubcomponentInstantiationDescription::
    add_configProperty (SubcomponentInstantiationDescription::configProperty_value_type const& e)
    {
      configProperty_.push_back (e);
    }

    size_t SubcomponentInstantiationDescription::
    count_configProperty(void) const
    {
      return configProperty_.size ();
    }

    // SubcomponentInstantiationDescription
    bool SubcomponentInstantiationDescription::
    referencedPackage_p () const
    {
      return referencedPackage_.get () != 0;
    }

    ::DAnCE::Config_Handlers::ComponentPackageReference const& SubcomponentInstantiationDescription::
    referencedPackage () const
    {
      return *referencedPackage_;
    }

    void SubcomponentInstantiationDescription::
    referencedPackage (::DAnCE::Config_Handlers::ComponentPackageReference const& e)
    {
      if (referencedPackage_.get ())
      {
        *referencedPackage_ = e;
      }

      else
      {
        referencedPackage_ = SubcomponentInstantiationDescription::referencedPackage_auto_ptr_type (new ::DAnCE::Config_Handlers::ComponentPackageReference (e));
        referencedPackage_->container (this);
      }
    }

    // SubcomponentInstantiationDescription
    bool SubcomponentInstantiationDescription::
    importedPackage_p () const
    {
      return importedPackage_.get () != 0;
    }

    ::DAnCE::Config_Handlers::ComponentPackageImport const& SubcomponentInstantiationDescription::
    importedPackage () const
    {
      return *importedPackage_;
    }

    void SubcomponentInstantiationDescription::
    importedPackage (::DAnCE::Config_Handlers::ComponentPackageImport const& e)
    {
      if (importedPackage_.get ())
      {
        *importedPackage_ = e;
      }

      else
      {
        importedPackage_ = SubcomponentInstantiationDescription::importedPackage_auto_ptr_type (new ::DAnCE::Config_Handlers::ComponentPackageImport (e));
        importedPackage_->container (this);
      }
    }

    // SubcomponentInstantiationDescription
    bool SubcomponentInstantiationDescription::
    id_p () const
    {
      return id_.get () != 0;
    }

    ::XMLSchema::ID<ACE_TCHAR> const& SubcomponentInstantiationDescription::
    id () const
    {
      return *id_;
    }

    ::XMLSchema::ID<ACE_TCHAR>& SubcomponentInstantiationDescription::
    id ()
    {
      return *id_;
    }

    void SubcomponentInstantiationDescription::
    id (::XMLSchema::ID<ACE_TCHAR> const& e)
    {
      if (id_.get ())
      {
        *id_ = e;
      }

      else
      {
        id_ = SubcomponentInstantiationDescription::id_auto_ptr_type (new ::XMLSchema::ID<ACE_TCHAR> (e));
        id_->container (this);
      }
    }


    // SubcomponentPropertyReference

    SubcomponentPropertyReference::SubcomponentPropertyReference (::XMLSchema::string<ACE_TCHAR> const& propertyName__,
                                                                  ::DAnCE::Config_Handlers::IdRef const& instance__) :
    ::XSCRT::Type (),
    propertyName_ (new ::XMLSchema::string<ACE_TCHAR> (propertyName__)),
    instance_ (new ::DAnCE::Config_Handlers::IdRef (instance__)),
    regulator__ ()
    {
      propertyName_->container (this);
      instance_->container (this);
    }

    SubcomponentPropertyReference::SubcomponentPropertyReference (SubcomponentPropertyReference const& s) :
    ::XSCRT::Type (s),
    propertyName_ (new ::XMLSchema::string<ACE_TCHAR> (*s.propertyName_)),
    instance_ (new ::DAnCE::Config_Handlers::IdRef (*s.instance_)),
    regulator__ ()
    {
      propertyName_->container (this);
      instance_->container (this);
    }

    SubcomponentPropertyReference&
    SubcomponentPropertyReference::operator= (SubcomponentPropertyReference const& s)
    {
      if (&s != this)
      {
        propertyName (*s.propertyName_);

        instance (*s.instance_);
      }

      return *this;
    }


    // SubcomponentPropertyReference
    ::XMLSchema::string<ACE_TCHAR> const& SubcomponentPropertyReference::
    propertyName () const
    {
      return *propertyName_;
    }

    void SubcomponentPropertyReference::
    propertyName (::XMLSchema::string<ACE_TCHAR> const& e)
    {
      *propertyName_ = e;
    }

    // SubcomponentPropertyReference
    ::DAnCE::Config_Handlers::IdRef const& SubcomponentPropertyReference::
    instance () const
    {
      return *instance_;
    }

    void SubcomponentPropertyReference::
    instance (::DAnCE::Config_Handlers::IdRef const& e)
    {
      *instance_ = e;
    }


    // AssemblyPropertyMapping

    AssemblyPropertyMapping::AssemblyPropertyMapping (::XMLSchema::string<ACE_TCHAR> const& name__,
                                                      ::XMLSchema::string<ACE_TCHAR> const& externalName__) :
    ::XSCRT::Type (),
    name_ (new ::XMLSchema::string<ACE_TCHAR> (name__)),
    externalName_ (new ::XMLSchema::string<ACE_TCHAR> (externalName__)),
    regulator__ ()
    {
      name_->container (this);
      externalName_->container (this);
    }

    AssemblyPropertyMapping::AssemblyPropertyMapping (AssemblyPropertyMapping const& s) :
    ::XSCRT::Type (s),
    name_ (new ::XMLSchema::string<ACE_TCHAR> (*s.name_)),
    externalName_ (new ::XMLSchema::string<ACE_TCHAR> (*s.externalName_)),
    delegatesTo_ (s.delegatesTo_),
    regulator__ ()
    {
      name_->container (this);
      externalName_->container (this);
    }

    AssemblyPropertyMapping&
    AssemblyPropertyMapping::operator= (AssemblyPropertyMapping const& s)
    {
      if (&s != this)
      {
        name (*s.name_);

        externalName (*s.externalName_);

        delegatesTo_ = s.delegatesTo_;
      }

      return *this;
    }


    // AssemblyPropertyMapping
    ::XMLSchema::string<ACE_TCHAR> const& AssemblyPropertyMapping::
    name () const
    {
      return *name_;
    }

    void AssemblyPropertyMapping::
    name (::XMLSchema::string<ACE_TCHAR> const& e)
    {
      *name_ = e;
    }

    // AssemblyPropertyMapping
    ::XMLSchema::string<ACE_TCHAR> const& AssemblyPropertyMapping::
    externalName () const
    {
      return *externalName_;
    }

    void AssemblyPropertyMapping::
    externalName (::XMLSchema::string<ACE_TCHAR> const& e)
    {
      *externalName_ = e;
    }

    // AssemblyPropertyMapping
    AssemblyPropertyMapping::delegatesTo_iterator AssemblyPropertyMapping::
    begin_delegatesTo ()
    {
      return delegatesTo_.begin ();
    }

    AssemblyPropertyMapping::delegatesTo_iterator AssemblyPropertyMapping::
    end_delegatesTo ()
    {
      return delegatesTo_.end ();
    }

    AssemblyPropertyMapping::delegatesTo_const_iterator AssemblyPropertyMapping::
    begin_delegatesTo () const
    {
      return delegatesTo_.begin ();
    }

    AssemblyPropertyMapping::delegatesTo_const_iterator AssemblyPropertyMapping::
    end_delegatesTo () const
    {
      return delegatesTo_.end ();
    }

    void AssemblyPropertyMapping::
    add_delegatesTo (AssemblyPropertyMapping::delegatesTo_value_type const& e)
    {
      delegatesTo_.push_back (e);
    }

    size_t AssemblyPropertyMapping::
    count_delegatesTo(void) const
    {
      return delegatesTo_.size ();
    }


    // LocalityKind

    LocalityKind::Value LocalityKind::
    integral () const
    {
      return v_;
    }

    bool
    operator== (::DAnCE::Config_Handlers::LocalityKind const& a, ::DAnCE::Config_Handlers::LocalityKind const& b)
    {
      return a.v_ == b.v_;
    }

    bool
    operator!= (::DAnCE::Config_Handlers::LocalityKind const& a, ::DAnCE::Config_Handlers::LocalityKind const& b)
    {
      return a.v_ != b.v_;
    }

    LocalityKind::
    LocalityKind (LocalityKind::Value v)
    : v_ (v)
    {
    }

    // Locality

    Locality::Locality (::DAnCE::Config_Handlers::LocalityKind const& constraint__,
                        ::DAnCE::Config_Handlers::IdRef const& constrainedInstance__) :
    ::XSCRT::Type (),
    constraint_ (new ::DAnCE::Config_Handlers::LocalityKind (constraint__)),
    constrainedInstance_ (new ::DAnCE::Config_Handlers::IdRef (constrainedInstance__)),
    regulator__ ()
    {
      constraint_->container (this);
      constrainedInstance_->container (this);
    }

    Locality::Locality (Locality const& s) :
    ::XSCRT::Type (s),
    constraint_ (new ::DAnCE::Config_Handlers::LocalityKind (*s.constraint_)),
    constrainedInstance_ (new ::DAnCE::Config_Handlers::IdRef (*s.constrainedInstance_)),
    regulator__ ()
    {
      constraint_->container (this);
      constrainedInstance_->container (this);
    }

    Locality&
    Locality::operator= (Locality const& s)
    {
      if (&s != this)
      {
        constraint (*s.constraint_);

        constrainedInstance (*s.constrainedInstance_);
      }

      return *this;
    }


    // Locality
    ::DAnCE::Config_Handlers::LocalityKind const& Locality::
    constraint () const
    {
      return *constraint_;
    }

    void Locality::
    constraint (::DAnCE::Config_Handlers::LocalityKind const& e)
    {
      *constraint_ = e;
    }

    // Locality
    ::DAnCE::Config_Handlers::IdRef const& Locality::
    constrainedInstance () const
    {
      return *constrainedInstance_;
    }

    void Locality::
    constrainedInstance (::DAnCE::Config_Handlers::IdRef const& e)
    {
      *constrainedInstance_ = e;
    }


    // ComponentAssemblyDescription

    ComponentAssemblyDescription::ComponentAssemblyDescription () :
    ::XSCRT::Type (),
    regulator__ ()
    {
    }

    ComponentAssemblyDescription::ComponentAssemblyDescription (ComponentAssemblyDescription const& s) :
    ::XSCRT::Type (s),
    instance_ (s.instance_),
    connection_ (s.connection_),
    externalProperty_ (s.externalProperty_),
    locality_ (s.locality_),
    regulator__ ()
    {
    }

    ComponentAssemblyDescription&
    ComponentAssemblyDescription::operator= (ComponentAssemblyDescription const& s)
    {
      if (&s != this)
      {
        instance_ = s.instance_;

        connection_ = s.connection_;

        externalProperty_ = s.externalProperty_;

        locality_ = s.locality_;
      }

      return *this;
    }


    // ComponentAssemblyDescription
    ComponentAssemblyDescription::instance_iterator ComponentAssemblyDescription::
    begin_instance ()
    {
      return instance_.begin ();
    }

    ComponentAssemblyDescription::instance_iterator ComponentAssemblyDescription::
    end_instance ()
    {
      return instance_.end ();
    }

    ComponentAssemblyDescription::instance_const_iterator ComponentAssemblyDescription::
    begin_instance () const
    {
      return instance_.begin ();
    }

    ComponentAssemblyDescription::instance_const_iterator ComponentAssemblyDescription::
    end_instance () const
    {
      return instance_.end ();
    }

    void ComponentAssemblyDescription::
    add_instance (ComponentAssemblyDescription::instance_value_type const& e)
    {
      instance_.push_back (e);
    }

    size_t ComponentAssemblyDescription::
    count_instance(void) const
    {
      return instance_.size ();
    }

    // ComponentAssemblyDescription
    ComponentAssemblyDescription::connection_iterator ComponentAssemblyDescription::
    begin_connection ()
    {
      return connection_.begin ();
    }

    ComponentAssemblyDescription::connection_iterator ComponentAssemblyDescription::
    end_connection ()
    {
      return connection_.end ();
    }

    ComponentAssemblyDescription::connection_const_iterator ComponentAssemblyDescription::
    begin_connection () const
    {
      return connection_.begin ();
    }

    ComponentAssemblyDescription::connection_const_iterator ComponentAssemblyDescription::
    end_connection () const
    {
      return connection_.end ();
    }

    void ComponentAssemblyDescription::
    add_connection (ComponentAssemblyDescription::connection_value_type const& e)
    {
      connection_.push_back (e);
    }

    size_t ComponentAssemblyDescription::
    count_connection(void) const
    {
      return connection_.size ();
    }

    // ComponentAssemblyDescription
    ComponentAssemblyDescription::externalProperty_iterator ComponentAssemblyDescription::
    begin_externalProperty ()
    {
      return externalProperty_.begin ();
    }

    ComponentAssemblyDescription::externalProperty_iterator ComponentAssemblyDescription::
    end_externalProperty ()
    {
      return externalProperty_.end ();
    }

    ComponentAssemblyDescription::externalProperty_const_iterator ComponentAssemblyDescription::
    begin_externalProperty () const
    {
      return externalProperty_.begin ();
    }

    ComponentAssemblyDescription::externalProperty_const_iterator ComponentAssemblyDescription::
    end_externalProperty () const
    {
      return externalProperty_.end ();
    }

    void ComponentAssemblyDescription::
    add_externalProperty (ComponentAssemblyDescription::externalProperty_value_type const& e)
    {
      externalProperty_.push_back (e);
    }

    size_t ComponentAssemblyDescription::
    count_externalProperty(void) const
    {
      return externalProperty_.size ();
    }

    // ComponentAssemblyDescription
    ComponentAssemblyDescription::locality_iterator ComponentAssemblyDescription::
    begin_locality ()
    {
      return locality_.begin ();
    }

    ComponentAssemblyDescription::locality_iterator ComponentAssemblyDescription::
    end_locality ()
    {
      return locality_.end ();
    }

    ComponentAssemblyDescription::locality_const_iterator ComponentAssemblyDescription::
    begin_locality () const
    {
      return locality_.begin ();
    }

    ComponentAssemblyDescription::locality_const_iterator ComponentAssemblyDescription::
    end_locality () const
    {
      return locality_.end ();
    }

    void ComponentAssemblyDescription::
    add_locality (ComponentAssemblyDescription::locality_value_type const& e)
    {
      locality_.push_back (e);
    }

    size_t ComponentAssemblyDescription::
    count_locality(void) const
    {
      return locality_.size ();
    }


    // MonolithicImplementationDescription

    MonolithicImplementationDescription::MonolithicImplementationDescription () :
    ::XSCRT::Type (),
    regulator__ ()
    {
    }

    MonolithicImplementationDescription::MonolithicImplementationDescription (MonolithicImplementationDescription const& s) :
    ::XSCRT::Type (s),
    nodeExecParameter_ (s.nodeExecParameter_),
    componentExecParameter_ (s.componentExecParameter_),
    deployRequirement_ (s.deployRequirement_),
    primaryArtifact_ (s.primaryArtifact_),
    regulator__ ()
    {
    }

    MonolithicImplementationDescription&
    MonolithicImplementationDescription::operator= (MonolithicImplementationDescription const& s)
    {
      if (&s != this)
      {
        nodeExecParameter_ = s.nodeExecParameter_;

        componentExecParameter_ = s.componentExecParameter_;

        deployRequirement_ = s.deployRequirement_;

        primaryArtifact_ = s.primaryArtifact_;
      }

      return *this;
    }


    // MonolithicImplementationDescription
    MonolithicImplementationDescription::nodeExecParameter_iterator MonolithicImplementationDescription::
    begin_nodeExecParameter ()
    {
      return nodeExecParameter_.begin ();
    }

    MonolithicImplementationDescription::nodeExecParameter_iterator MonolithicImplementationDescription::
    end_nodeExecParameter ()
    {
      return nodeExecParameter_.end ();
    }

    MonolithicImplementationDescription::nodeExecParameter_const_iterator MonolithicImplementationDescription::
    begin_nodeExecParameter () const
    {
      return nodeExecParameter_.begin ();
    }

    MonolithicImplementationDescription::nodeExecParameter_const_iterator MonolithicImplementationDescription::
    end_nodeExecParameter () const
    {
      return nodeExecParameter_.end ();
    }

    void MonolithicImplementationDescription::
    add_nodeExecParameter (MonolithicImplementationDescription::nodeExecParameter_value_type const& e)
    {
      nodeExecParameter_.push_back (e);
    }

    size_t MonolithicImplementationDescription::
    count_nodeExecParameter(void) const
    {
      return nodeExecParameter_.size ();
    }

    // MonolithicImplementationDescription
    MonolithicImplementationDescription::componentExecParameter_iterator MonolithicImplementationDescription::
    begin_componentExecParameter ()
    {
      return componentExecParameter_.begin ();
    }

    MonolithicImplementationDescription::componentExecParameter_iterator MonolithicImplementationDescription::
    end_componentExecParameter ()
    {
      return componentExecParameter_.end ();
    }

    MonolithicImplementationDescription::componentExecParameter_const_iterator MonolithicImplementationDescription::
    begin_componentExecParameter () const
    {
      return componentExecParameter_.begin ();
    }

    MonolithicImplementationDescription::componentExecParameter_const_iterator MonolithicImplementationDescription::
    end_componentExecParameter () const
    {
      return componentExecParameter_.end ();
    }

    void MonolithicImplementationDescription::
    add_componentExecParameter (MonolithicImplementationDescription::componentExecParameter_value_type const& e)
    {
      componentExecParameter_.push_back (e);
    }

    size_t MonolithicImplementationDescription::
    count_componentExecParameter(void) const
    {
      return componentExecParameter_.size ();
    }

    // MonolithicImplementationDescription
    MonolithicImplementationDescription::deployRequirement_iterator MonolithicImplementationDescription::
    begin_deployRequirement ()
    {
      return deployRequirement_.begin ();
    }

    MonolithicImplementationDescription::deployRequirement_iterator MonolithicImplementationDescription::
    end_deployRequirement ()
    {
      return deployRequirement_.end ();
    }

    MonolithicImplementationDescription::deployRequirement_const_iterator MonolithicImplementationDescription::
    begin_deployRequirement () const
    {
      return deployRequirement_.begin ();
    }

    MonolithicImplementationDescription::deployRequirement_const_iterator MonolithicImplementationDescription::
    end_deployRequirement () const
    {
      return deployRequirement_.end ();
    }

    void MonolithicImplementationDescription::
    add_deployRequirement (MonolithicImplementationDescription::deployRequirement_value_type const& e)
    {
      deployRequirement_.push_back (e);
    }

    size_t MonolithicImplementationDescription::
    count_deployRequirement(void) const
    {
      return deployRequirement_.size ();
    }

    // MonolithicImplementationDescription
    MonolithicImplementationDescription::primaryArtifact_iterator MonolithicImplementationDescription::
    begin_primaryArtifact ()
    {
      return primaryArtifact_.begin ();
    }

    MonolithicImplementationDescription::primaryArtifact_iterator MonolithicImplementationDescription::
    end_primaryArtifact ()
    {
      return primaryArtifact_.end ();
    }

    MonolithicImplementationDescription::primaryArtifact_const_iterator MonolithicImplementationDescription::
    begin_primaryArtifact () const
    {
      return primaryArtifact_.begin ();
    }

    MonolithicImplementationDescription::primaryArtifact_const_iterator MonolithicImplementationDescription::
    end_primaryArtifact () const
    {
      return primaryArtifact_.end ();
    }

    void MonolithicImplementationDescription::
    add_primaryArtifact (MonolithicImplementationDescription::primaryArtifact_value_type const& e)
    {
      primaryArtifact_.push_back (e);
    }

    size_t MonolithicImplementationDescription::
    count_primaryArtifact(void) const
    {
      return primaryArtifact_.size ();
    }


    // ComponentImplementationDescription

    ComponentImplementationDescription::ComponentImplementationDescription () :
    ::XSCRT::Type (),
    regulator__ ()
    {
    }

    ComponentImplementationDescription::ComponentImplementationDescription (ComponentImplementationDescription const& s) :
    ::XSCRT::Type (s),
    label_ (s.label_.get () ? new ::XMLSchema::string<ACE_TCHAR> (*s.label_) : 0),
    UUID_ (s.UUID_.get () ? new ::XMLSchema::string<ACE_TCHAR> (*s.UUID_) : 0),
    implements_ (s.implements_.get () ? new ::DAnCE::Config_Handlers::ComponentInterfaceDescription (*s.implements_) : 0),
    assemblyImpl_ (s.assemblyImpl_.get () ? new ::DAnCE::Config_Handlers::ComponentAssemblyDescription (*s.assemblyImpl_) : 0),
    monolithicImpl_ (s.monolithicImpl_.get () ? new ::DAnCE::Config_Handlers::MonolithicImplementationDescription (*s.monolithicImpl_) : 0),
    configProperty_ (s.configProperty_),
    capability_ (s.capability_),
    dependsOn_ (s.dependsOn_),
    infoProperty_ (s.infoProperty_),
    href_ (s.href_.get () ? new ::XMLSchema::string<ACE_TCHAR> (*s.href_) : 0),
    regulator__ ()
    {
      if (label_.get ()) label_->container (this);
      if (UUID_.get ()) UUID_->container (this);
      if (implements_.get ()) implements_->container (this);
      if (assemblyImpl_.get ()) assemblyImpl_->container (this);
      if (monolithicImpl_.get ()) monolithicImpl_->container (this);
      if (href_.get ()) href_->container (this);
    }

    ComponentImplementationDescription&
    ComponentImplementationDescription::operator= (ComponentImplementationDescription const& s)
    {
      if (&s != this)
      {
        if (s.label_.get ())
          label (*(s.label_));
        else
          label_.reset (0);

        if (s.UUID_.get ())
          UUID (*(s.UUID_));
        else
          UUID_.reset (0);

        if (s.implements_.get ())
          implements (*(s.implements_));
        else
          implements_.reset (0);

        if (s.assemblyImpl_.get ())
          assemblyImpl (*(s.assemblyImpl_));
        else
          assemblyImpl_.reset (0);

        if (s.monolithicImpl_.get ())
          monolithicImpl (*(s.monolithicImpl_));
        else
          monolithicImpl_.reset (0);

        configProperty_ = s.configProperty_;

        capability_ = s.capability_;

        dependsOn_ = s.dependsOn_;

        infoProperty_ = s.infoProperty_;

        if (s.href_.get ()) href (*(s.href_));
        else href_.reset (0);
      }

      return *this;
    }


    // ComponentImplementationDescription
    bool ComponentImplementationDescription::
    label_p () const
    {
      return label_.get () != 0;
    }

    ::XMLSchema::string<ACE_TCHAR> const& ComponentImplementationDescription::
    label () const
    {
      return *label_;
    }

    void ComponentImplementationDescription::
    label (::XMLSchema::string<ACE_TCHAR> const& e)
    {
      if (label_.get ())
      {
        *label_ = e;
      }

      else
      {
        label_ = ComponentImplementationDescription::label_auto_ptr_type (new ::XMLSchema::string<ACE_TCHAR> (e));
        label_->container (this);
      }
    }

    // ComponentImplementationDescription
    bool ComponentImplementationDescription::
    UUID_p () const
    {
      return UUID_.get () != 0;
    }

    ::XMLSchema::string<ACE_TCHAR> const& ComponentImplementationDescription::
    UUID () const
    {
      return *UUID_;
    }

    void ComponentImplementationDescription::
    UUID (::XMLSchema::string<ACE_TCHAR> const& e)
    {
      if (UUID_.get ())
      {
        *UUID_ = e;
      }

      else
      {
        UUID_ = ComponentImplementationDescription::UUID_auto_ptr_type (new ::XMLSchema::string<ACE_TCHAR> (e));
        UUID_->container (this);
      }
    }

    // ComponentImplementationDescription
    bool ComponentImplementationDescription::
    implements_p () const
    {
      return implements_.get () != 0;
    }

    ::DAnCE::Config_Handlers::ComponentInterfaceDescription const& ComponentImplementationDescription::
    implements () const
    {
      return *implements_;
    }

    void ComponentImplementationDescription::
    implements (::DAnCE::Config_Handlers::ComponentInterfaceDescription const& e)
    {
      if (implements_.get ())
      {
        *implements_ = e;
      }

      else
      {
        implements_ = ComponentImplementationDescription::implements_auto_ptr_type (new ::DAnCE::Config_Handlers::ComponentInterfaceDescription (e));
        implements_->container (this);
      }
    }

    // ComponentImplementationDescription
    bool ComponentImplementationDescription::
    assemblyImpl_p () const
    {
      return assemblyImpl_.get () != 0;
    }

    ::DAnCE::Config_Handlers::ComponentAssemblyDescription const& ComponentImplementationDescription::
    assemblyImpl () const
    {
      return *assemblyImpl_;
    }

    void ComponentImplementationDescription::
    assemblyImpl (::DAnCE::Config_Handlers::ComponentAssemblyDescription const& e)
    {
      if (assemblyImpl_.get ())
      {
        *assemblyImpl_ = e;
      }

      else
      {
        assemblyImpl_ = ComponentImplementationDescription::assemblyImpl_auto_ptr_type (new ::DAnCE::Config_Handlers::ComponentAssemblyDescription (e));
        assemblyImpl_->container (this);
      }
    }

    // ComponentImplementationDescription
    bool ComponentImplementationDescription::
    monolithicImpl_p () const
    {
      return monolithicImpl_.get () != 0;
    }

    ::DAnCE::Config_Handlers::MonolithicImplementationDescription const& ComponentImplementationDescription::
    monolithicImpl () const
    {
      return *monolithicImpl_;
    }

    void ComponentImplementationDescription::
    monolithicImpl (::DAnCE::Config_Handlers::MonolithicImplementationDescription const& e)
    {
      if (monolithicImpl_.get ())
      {
        *monolithicImpl_ = e;
      }

      else
      {
        monolithicImpl_ = ComponentImplementationDescription::monolithicImpl_auto_ptr_type (new ::DAnCE::Config_Handlers::MonolithicImplementationDescription (e));
        monolithicImpl_->container (this);
      }
    }

    // ComponentImplementationDescription
    ComponentImplementationDescription::configProperty_iterator ComponentImplementationDescription::
    begin_configProperty ()
    {
      return configProperty_.begin ();
    }

    ComponentImplementationDescription::configProperty_iterator ComponentImplementationDescription::
    end_configProperty ()
    {
      return configProperty_.end ();
    }

    ComponentImplementationDescription::configProperty_const_iterator ComponentImplementationDescription::
    begin_configProperty () const
    {
      return configProperty_.begin ();
    }

    ComponentImplementationDescription::configProperty_const_iterator ComponentImplementationDescription::
    end_configProperty () const
    {
      return configProperty_.end ();
    }

    void ComponentImplementationDescription::
    add_configProperty (ComponentImplementationDescription::configProperty_value_type const& e)
    {
      configProperty_.push_back (e);
    }

    size_t ComponentImplementationDescription::
    count_configProperty(void) const
    {
      return configProperty_.size ();
    }

    // ComponentImplementationDescription
    ComponentImplementationDescription::capability_iterator ComponentImplementationDescription::
    begin_capability ()
    {
      return capability_.begin ();
    }

    ComponentImplementationDescription::capability_iterator ComponentImplementationDescription::
    end_capability ()
    {
      return capability_.end ();
    }

    ComponentImplementationDescription::capability_const_iterator ComponentImplementationDescription::
    begin_capability () const
    {
      return capability_.begin ();
    }

    ComponentImplementationDescription::capability_const_iterator ComponentImplementationDescription::
    end_capability () const
    {
      return capability_.end ();
    }

    void ComponentImplementationDescription::
    add_capability (ComponentImplementationDescription::capability_value_type const& e)
    {
      capability_.push_back (e);
    }

    size_t ComponentImplementationDescription::
    count_capability(void) const
    {
      return capability_.size ();
    }

    // ComponentImplementationDescription
    ComponentImplementationDescription::dependsOn_iterator ComponentImplementationDescription::
    begin_dependsOn ()
    {
      return dependsOn_.begin ();
    }

    ComponentImplementationDescription::dependsOn_iterator ComponentImplementationDescription::
    end_dependsOn ()
    {
      return dependsOn_.end ();
    }

    ComponentImplementationDescription::dependsOn_const_iterator ComponentImplementationDescription::
    begin_dependsOn () const
    {
      return dependsOn_.begin ();
    }

    ComponentImplementationDescription::dependsOn_const_iterator ComponentImplementationDescription::
    end_dependsOn () const
    {
      return dependsOn_.end ();
    }

    void ComponentImplementationDescription::
    add_dependsOn (ComponentImplementationDescription::dependsOn_value_type const& e)
    {
      dependsOn_.push_back (e);
    }

    size_t ComponentImplementationDescription::
    count_dependsOn(void) const
    {
      return dependsOn_.size ();
    }

    // ComponentImplementationDescription
    ComponentImplementationDescription::infoProperty_iterator ComponentImplementationDescription::
    begin_infoProperty ()
    {
      return infoProperty_.begin ();
    }

    ComponentImplementationDescription::infoProperty_iterator ComponentImplementationDescription::
    end_infoProperty ()
    {
      return infoProperty_.end ();
    }

    ComponentImplementationDescription::infoProperty_const_iterator ComponentImplementationDescription::
    begin_infoProperty () const
    {
      return infoProperty_.begin ();
    }

    ComponentImplementationDescription::infoProperty_const_iterator ComponentImplementationDescription::
    end_infoProperty () const
    {
      return infoProperty_.end ();
    }

    void ComponentImplementationDescription::
    add_infoProperty (ComponentImplementationDescription::infoProperty_value_type const& e)
    {
      infoProperty_.push_back (e);
    }

    size_t ComponentImplementationDescription::
    count_infoProperty(void) const
    {
      return infoProperty_.size ();
    }

    // ComponentImplementationDescription
    bool ComponentImplementationDescription::
    href_p () const
    {
      return href_.get () != 0;
    }

    ::XMLSchema::string<ACE_TCHAR> const& ComponentImplementationDescription::
    href () const
    {
      return *href_;
    }

    ::XMLSchema::string<ACE_TCHAR>& ComponentImplementationDescription::
    href ()
    {
      return *href_;
    }

    void ComponentImplementationDescription::
    href (::XMLSchema::string<ACE_TCHAR> const& e)
    {
      if (href_.get ())
      {
        *href_ = e;
      }

      else
      {
        href_ = ComponentImplementationDescription::href_auto_ptr_type (new ::XMLSchema::string<ACE_TCHAR> (e));
        href_->container (this);
      }
    }


    // ConnectorImplementationDescription

    ConnectorImplementationDescription::ConnectorImplementationDescription () :
    ::XSCRT::Type (),
    regulator__ ()
    {
    }

    ConnectorImplementationDescription::ConnectorImplementationDescription (ConnectorImplementationDescription const& s) :
    ::XSCRT::Type (s),
    label_ (s.label_.get () ? new ::XMLSchema::string<ACE_TCHAR> (*s.label_) : 0),
    UUID_ (s.UUID_.get () ? new ::XMLSchema::string<ACE_TCHAR> (*s.UUID_) : 0),
    implements_ (s.implements_.get () ? new ::DAnCE::Config_Handlers::ComponentInterfaceDescription (*s.implements_) : 0),
    assemblyImpl_ (s.assemblyImpl_.get () ? new ::DAnCE::Config_Handlers::ComponentAssemblyDescription (*s.assemblyImpl_) : 0),
    monolithicImpl_ (s.monolithicImpl_.get () ? new ::DAnCE::Config_Handlers::MonolithicImplementationDescription (*s.monolithicImpl_) : 0),
    configProperty_ (s.configProperty_),
    capability_ (s.capability_),
    dependsOn_ (s.dependsOn_),
    infoProperty_ (s.infoProperty_),
    href_ (s.href_.get () ? new ::XMLSchema::string<ACE_TCHAR> (*s.href_) : 0),
    regulator__ ()
    {
      if (label_.get ()) label_->container (this);
      if (UUID_.get ()) UUID_->container (this);
      if (implements_.get ()) implements_->container (this);
      if (assemblyImpl_.get ()) assemblyImpl_->container (this);
      if (monolithicImpl_.get ()) monolithicImpl_->container (this);
      if (href_.get ()) href_->container (this);
    }

    ConnectorImplementationDescription&
    ConnectorImplementationDescription::operator= (ConnectorImplementationDescription const& s)
    {
      if (&s != this)
      {
        if (s.label_.get ())
          label (*(s.label_));
        else
          label_.reset (0);

        if (s.UUID_.get ())
          UUID (*(s.UUID_));
        else
          UUID_.reset (0);

        if (s.implements_.get ())
          implements (*(s.implements_));
        else
          implements_.reset (0);

        if (s.assemblyImpl_.get ())
          assemblyImpl (*(s.assemblyImpl_));
        else
          assemblyImpl_.reset (0);

        if (s.monolithicImpl_.get ())
          monolithicImpl (*(s.monolithicImpl_));
        else
          monolithicImpl_.reset (0);

        configProperty_ = s.configProperty_;

        capability_ = s.capability_;

        dependsOn_ = s.dependsOn_;

        infoProperty_ = s.infoProperty_;

        if (s.href_.get ()) href (*(s.href_));
        else href_.reset (0);
      }

      return *this;
    }


    // ConnectorImplementationDescription
    bool ConnectorImplementationDescription::
    label_p () const
    {
      return label_.get () != 0;
    }

    ::XMLSchema::string<ACE_TCHAR> const& ConnectorImplementationDescription::
    label () const
    {
      return *label_;
    }

    void ConnectorImplementationDescription::
    label (::XMLSchema::string<ACE_TCHAR> const& e)
    {
      if (label_.get ())
      {
        *label_ = e;
      }

      else
      {
        label_ = ConnectorImplementationDescription::label_auto_ptr_type (new ::XMLSchema::string<ACE_TCHAR> (e));
        label_->container (this);
      }
    }

    // ConnectorImplementationDescription
    bool ConnectorImplementationDescription::
    UUID_p () const
    {
      return UUID_.get () != 0;
    }

    ::XMLSchema::string<ACE_TCHAR> const& ConnectorImplementationDescription::
    UUID () const
    {
      return *UUID_;
    }

    void ConnectorImplementationDescription::
    UUID (::XMLSchema::string<ACE_TCHAR> const& e)
    {
      if (UUID_.get ())
      {
        *UUID_ = e;
      }

      else
      {
        UUID_ = ConnectorImplementationDescription::UUID_auto_ptr_type (new ::XMLSchema::string<ACE_TCHAR> (e));
        UUID_->container (this);
      }
    }

    // ConnectorImplementationDescription
    bool ConnectorImplementationDescription::
    implements_p () const
    {
      return implements_.get () != 0;
    }

    ::DAnCE::Config_Handlers::ComponentInterfaceDescription const& ConnectorImplementationDescription::
    implements () const
    {
      return *implements_;
    }

    void ConnectorImplementationDescription::
    implements (::DAnCE::Config_Handlers::ComponentInterfaceDescription const& e)
    {
      if (implements_.get ())
      {
        *implements_ = e;
      }

      else
      {
        implements_ = ConnectorImplementationDescription::implements_auto_ptr_type (new ::DAnCE::Config_Handlers::ComponentInterfaceDescription (e));
        implements_->container (this);
      }
    }

    // ConnectorImplementationDescription
    bool ConnectorImplementationDescription::
    assemblyImpl_p () const
    {
      return assemblyImpl_.get () != 0;
    }

    ::DAnCE::Config_Handlers::ComponentAssemblyDescription const& ConnectorImplementationDescription::
    assemblyImpl () const
    {
      return *assemblyImpl_;
    }

    void ConnectorImplementationDescription::
    assemblyImpl (::DAnCE::Config_Handlers::ComponentAssemblyDescription const& e)
    {
      if (assemblyImpl_.get ())
      {
        *assemblyImpl_ = e;
      }

      else
      {
        assemblyImpl_ = ConnectorImplementationDescription::assemblyImpl_auto_ptr_type (new ::DAnCE::Config_Handlers::ComponentAssemblyDescription (e));
        assemblyImpl_->container (this);
      }
    }

    // ConnectorImplementationDescription
    bool ConnectorImplementationDescription::
    monolithicImpl_p () const
    {
      return monolithicImpl_.get () != 0;
    }

    ::DAnCE::Config_Handlers::MonolithicImplementationDescription const& ConnectorImplementationDescription::
    monolithicImpl () const
    {
      return *monolithicImpl_;
    }

    void ConnectorImplementationDescription::
    monolithicImpl (::DAnCE::Config_Handlers::MonolithicImplementationDescription const& e)
    {
      if (monolithicImpl_.get ())
      {
        *monolithicImpl_ = e;
      }

      else
      {
        monolithicImpl_ = ConnectorImplementationDescription::monolithicImpl_auto_ptr_type (new ::DAnCE::Config_Handlers::MonolithicImplementationDescription (e));
        monolithicImpl_->container (this);
      }
    }

    // ConnectorImplementationDescription
    ConnectorImplementationDescription::configProperty_iterator ConnectorImplementationDescription::
    begin_configProperty ()
    {
      return configProperty_.begin ();
    }

    ConnectorImplementationDescription::configProperty_iterator ConnectorImplementationDescription::
    end_configProperty ()
    {
      return configProperty_.end ();
    }

    ConnectorImplementationDescription::configProperty_const_iterator ConnectorImplementationDescription::
    begin_configProperty () const
    {
      return configProperty_.begin ();
    }

    ConnectorImplementationDescription::configProperty_const_iterator ConnectorImplementationDescription::
    end_configProperty () const
    {
      return configProperty_.end ();
    }

    void ConnectorImplementationDescription::
    add_configProperty (ConnectorImplementationDescription::configProperty_value_type const& e)
    {
      configProperty_.push_back (e);
    }

    size_t ConnectorImplementationDescription::
    count_configProperty(void) const
    {
      return configProperty_.size ();
    }

    // ConnectorImplementationDescription
    ConnectorImplementationDescription::capability_iterator ConnectorImplementationDescription::
    begin_capability ()
    {
      return capability_.begin ();
    }

    ConnectorImplementationDescription::capability_iterator ConnectorImplementationDescription::
    end_capability ()
    {
      return capability_.end ();
    }

    ConnectorImplementationDescription::capability_const_iterator ConnectorImplementationDescription::
    begin_capability () const
    {
      return capability_.begin ();
    }

    ConnectorImplementationDescription::capability_const_iterator ConnectorImplementationDescription::
    end_capability () const
    {
      return capability_.end ();
    }

    void ConnectorImplementationDescription::
    add_capability (ConnectorImplementationDescription::capability_value_type const& e)
    {
      capability_.push_back (e);
    }

    size_t ConnectorImplementationDescription::
    count_capability(void) const
    {
      return capability_.size ();
    }

    // ConnectorImplementationDescription
    ConnectorImplementationDescription::dependsOn_iterator ConnectorImplementationDescription::
    begin_dependsOn ()
    {
      return dependsOn_.begin ();
    }

    ConnectorImplementationDescription::dependsOn_iterator ConnectorImplementationDescription::
    end_dependsOn ()
    {
      return dependsOn_.end ();
    }

    ConnectorImplementationDescription::dependsOn_const_iterator ConnectorImplementationDescription::
    begin_dependsOn () const
    {
      return dependsOn_.begin ();
    }

    ConnectorImplementationDescription::dependsOn_const_iterator ConnectorImplementationDescription::
    end_dependsOn () const
    {
      return dependsOn_.end ();
    }

    void ConnectorImplementationDescription::
    add_dependsOn (ConnectorImplementationDescription::dependsOn_value_type const& e)
    {
      dependsOn_.push_back (e);
    }

    size_t ConnectorImplementationDescription::
    count_dependsOn(void) const
    {
      return dependsOn_.size ();
    }

    // ConnectorImplementationDescription
    ConnectorImplementationDescription::infoProperty_iterator ConnectorImplementationDescription::
    begin_infoProperty ()
    {
      return infoProperty_.begin ();
    }

    ConnectorImplementationDescription::infoProperty_iterator ConnectorImplementationDescription::
    end_infoProperty ()
    {
      return infoProperty_.end ();
    }

    ConnectorImplementationDescription::infoProperty_const_iterator ConnectorImplementationDescription::
    begin_infoProperty () const
    {
      return infoProperty_.begin ();
    }

    ConnectorImplementationDescription::infoProperty_const_iterator ConnectorImplementationDescription::
    end_infoProperty () const
    {
      return infoProperty_.end ();
    }

    void ConnectorImplementationDescription::
    add_infoProperty (ConnectorImplementationDescription::infoProperty_value_type const& e)
    {
      infoProperty_.push_back (e);
    }

    size_t ConnectorImplementationDescription::
    count_infoProperty(void) const
    {
      return infoProperty_.size ();
    }

    // ConnectorImplementationDescription
    bool ConnectorImplementationDescription::
    href_p () const
    {
      return href_.get () != 0;
    }

    ::XMLSchema::string<ACE_TCHAR> const& ConnectorImplementationDescription::
    href () const
    {
      return *href_;
    }

    ::XMLSchema::string<ACE_TCHAR>& ConnectorImplementationDescription::
    href ()
    {
      return *href_;
    }

    void ConnectorImplementationDescription::
    href (::XMLSchema::string<ACE_TCHAR> const& e)
    {
      if (href_.get ())
      {
        *href_ = e;
      }

      else
      {
        href_ = ConnectorImplementationDescription::href_auto_ptr_type (new ::XMLSchema::string<ACE_TCHAR> (e));
        href_->container (this);
      }
    }
  }
}

namespace DAnCE
{
  namespace Config_Handlers
  {
    // ComponentPackageReference

    ComponentPackageReference::
    ComponentPackageReference (::XSCRT::XML::Element<ACE_TCHAR> const& e)
    :Base (e), regulator__ ()
    {

      ::XSCRT::Parser<ACE_TCHAR> p (e);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element<ACE_TCHAR> e (p.next_element ());
        std::basic_string<ACE_TCHAR> n (::XSCRT::XML::uq_name (e.name ()));

        if (n == ACE_TEXT("requiredUUID"))
        {
          ::XMLSchema::string<ACE_TCHAR> t (e);
          requiredUUID (t);
        }

        else if (n == ACE_TEXT("requiredName"))
        {
          ::XMLSchema::string<ACE_TCHAR> t (e);
          requiredName (t);
        }

        else if (n == ACE_TEXT("requiredType"))
        {
          requiredType_ = ComponentPackageReference::requiredType_auto_ptr_type (new ::DAnCE::Config_Handlers::ComponentInterfaceDescription (e));
          requiredType_->container (this);
        }

        else
        {
        }
      }
    }

    // SubcomponentInstantiationDescription

    SubcomponentInstantiationDescription::
    SubcomponentInstantiationDescription (::XSCRT::XML::Element<ACE_TCHAR> const& e)
    :Base (e), regulator__ ()
    {

      ::XSCRT::Parser<ACE_TCHAR> p (e);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element<ACE_TCHAR> e (p.next_element ());
        std::basic_string<ACE_TCHAR> n (::XSCRT::XML::uq_name (e.name ()));

        if (n == ACE_TEXT("name"))
        {
          name_ = SubcomponentInstantiationDescription::name_auto_ptr_type (new ::XMLSchema::string<ACE_TCHAR> (e));
          name_->container (this);
        }

        else if (n == ACE_TEXT("basePackage"))
        {
          ::DAnCE::Config_Handlers::ComponentPackageDescription t (e);
          basePackage (t);
        }

        else if (n == ACE_TEXT("specializedConfig"))
        {
          ::DAnCE::Config_Handlers::PackageConfiguration t (e);
          specializedConfig (t);
        }

        else if (n == ACE_TEXT("selectRequirement"))
        {
          selectRequirement_value_type t (new ::DAnCE::Config_Handlers::Requirement (e));
          add_selectRequirement (t);
        }

        else if (n == ACE_TEXT("configProperty"))
        {
          configProperty_value_type t (new ::DAnCE::Config_Handlers::Property (e));
          add_configProperty (t);
        }

        else if (n == ACE_TEXT("referencedPackage"))
        {
          ::DAnCE::Config_Handlers::ComponentPackageReference t (e);
          referencedPackage (t);
        }

        else if (n == ACE_TEXT("importedPackage"))
        {
          ::DAnCE::Config_Handlers::ComponentPackageImport t (e);
          importedPackage (t);
        }

        else
        {
        }
      }

      while (p.more_attributes ())
      {
        ::XSCRT::XML::Attribute<ACE_TCHAR> a (p.next_attribute ());
        std::basic_string<ACE_TCHAR> n (::XSCRT::XML::uq_name (a.name ()));
        if (n == ACE_TEXT ("id"))
        {
          ::XMLSchema::ID<ACE_TCHAR> t (a);
          id (t);
          std::basic_string<ACE_TCHAR> temp ((*id_).c_str());
          (*ACE_Singleton<ID_Map::TSS_ID_Map, ACE_Null_Mutex>::instance())->
          add_id(temp, dynamic_cast<XSCRT::Type*> (this));
        }

        else
        {
        }
      }
    }

    // SubcomponentPropertyReference

    SubcomponentPropertyReference::
    SubcomponentPropertyReference (::XSCRT::XML::Element<ACE_TCHAR> const& e)
    :Base (e), regulator__ ()
    {

      ::XSCRT::Parser<ACE_TCHAR> p (e);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element<ACE_TCHAR> e (p.next_element ());
        std::basic_string<ACE_TCHAR> n (::XSCRT::XML::uq_name (e.name ()));

        if (n == ACE_TEXT("propertyName"))
        {
          propertyName_ = SubcomponentPropertyReference::propertyName_auto_ptr_type (new ::XMLSchema::string<ACE_TCHAR> (e));
          propertyName_->container (this);
        }

        else if (n == ACE_TEXT("instance"))
        {
          instance_ = SubcomponentPropertyReference::instance_auto_ptr_type (new ::DAnCE::Config_Handlers::IdRef (e));
          instance_->container (this);
        }

        else
        {
        }
      }
    }

    // AssemblyPropertyMapping

    AssemblyPropertyMapping::
    AssemblyPropertyMapping (::XSCRT::XML::Element<ACE_TCHAR> const& e)
    :Base (e), regulator__ ()
    {

      ::XSCRT::Parser<ACE_TCHAR> p (e);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element<ACE_TCHAR> e (p.next_element ());
        std::basic_string<ACE_TCHAR> n (::XSCRT::XML::uq_name (e.name ()));

        if (n == ACE_TEXT("name"))
        {
          name_ = AssemblyPropertyMapping::name_auto_ptr_type (new ::XMLSchema::string<ACE_TCHAR> (e));
          name_->container (this);
        }

        else if (n == ACE_TEXT("externalName"))
        {
          externalName_ = AssemblyPropertyMapping::externalName_auto_ptr_type (new ::XMLSchema::string<ACE_TCHAR> (e));
          externalName_->container (this);
        }

        else if (n == ACE_TEXT("delegatesTo"))
        {
          delegatesTo_value_type t (new ::DAnCE::Config_Handlers::SubcomponentPropertyReference (e));
          add_delegatesTo (t);
        }

        else
        {
        }
      }
    }

    // LocalityKind

    LocalityKind::
    LocalityKind (::XSCRT::XML::Element<ACE_TCHAR> const& e)
    : ::XSCRT::Type (e)
    {
      std::basic_string<ACE_TCHAR> v (e.value ());

      if (v == ACE_TEXT ("SameNodeAnyProcess")) v_ = SameNodeAnyProcess_l;
      else if (v == ACE_TEXT ("SameNodeSameProcess")) v_ = SameNodeSameProcess_l;
      else if (v == ACE_TEXT ("SameNodeDifferentProcess")) v_ = SameNodeDifferentProcess_l;
      else if (v == ACE_TEXT ("DifferentNode")) v_ = DifferentNode_l;
      else if (v == ACE_TEXT ("DifferentProcess")) v_ = DifferentProcess_l;
      else if (v == ACE_TEXT ("NoConstraint")) v_ = NoConstraint_l;
      else
      {
      }
    }

    LocalityKind::
    LocalityKind (::XSCRT::XML::Attribute<ACE_TCHAR> const& a)
    : ::XSCRT::Type (a)
    {
      std::basic_string<ACE_TCHAR> v (a.value ());

      if (v == ACE_TEXT ("SameNodeAnyProcess")) v_ = SameNodeAnyProcess_l;
      else if (v == ACE_TEXT ("SameNodeSameProcess")) v_ = SameNodeSameProcess_l;
      else if (v == ACE_TEXT ("SameNodeDifferentProcess")) v_ = SameNodeDifferentProcess_l;
      else if (v == ACE_TEXT ("DifferentNode")) v_ = DifferentNode_l;
      else if (v == ACE_TEXT ("DifferentProcess")) v_ = DifferentProcess_l;
      else if (v == ACE_TEXT ("NoConstraint")) v_ = NoConstraint_l;
      else
      {
      }
    }

    LocalityKind const LocalityKind::SameNodeAnyProcess (LocalityKind::SameNodeAnyProcess_l);
    LocalityKind const LocalityKind::SameNodeSameProcess (LocalityKind::SameNodeSameProcess_l);
    LocalityKind const LocalityKind::SameNodeDifferentProcess (LocalityKind::SameNodeDifferentProcess_l);
    LocalityKind const LocalityKind::DifferentNode (LocalityKind::DifferentNode_l);
    LocalityKind const LocalityKind::DifferentProcess (LocalityKind::DifferentProcess_l);
    LocalityKind const LocalityKind::NoConstraint (LocalityKind::NoConstraint_l);

    // Locality

    Locality::
    Locality (::XSCRT::XML::Element<ACE_TCHAR> const& e)
    :Base (e), regulator__ ()
    {

      ::XSCRT::Parser<ACE_TCHAR> p (e);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element<ACE_TCHAR> e (p.next_element ());
        std::basic_string<ACE_TCHAR> n (::XSCRT::XML::uq_name (e.name ()));

        if (n == ACE_TEXT("constraint"))
        {
          constraint_ = Locality::constraint_auto_ptr_type (new ::DAnCE::Config_Handlers::LocalityKind (e));
          constraint_->container (this);
        }

        else if (n == ACE_TEXT("constrainedInstance"))
        {
          constrainedInstance_ = Locality::constrainedInstance_auto_ptr_type (new ::DAnCE::Config_Handlers::IdRef (e));
          constrainedInstance_->container (this);
        }

        else
        {
        }
      }
    }

    // ComponentAssemblyDescription

    ComponentAssemblyDescription::
    ComponentAssemblyDescription (::XSCRT::XML::Element<ACE_TCHAR> const& e)
    :Base (e), regulator__ ()
    {

      ::XSCRT::Parser<ACE_TCHAR> p (e);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element<ACE_TCHAR> e (p.next_element ());
        std::basic_string<ACE_TCHAR> n (::XSCRT::XML::uq_name (e.name ()));

        if (n == ACE_TEXT("instance"))
        {
          instance_value_type t (new ::DAnCE::Config_Handlers::SubcomponentInstantiationDescription (e));
          add_instance (t);
        }

        else if (n == ACE_TEXT("connection"))
        {
          connection_value_type t (new ::DAnCE::Config_Handlers::AssemblyConnectionDescription (e));
          add_connection (t);
        }

        else if (n == ACE_TEXT("externalProperty"))
        {
          externalProperty_value_type t (new ::DAnCE::Config_Handlers::AssemblyPropertyMapping (e));
          add_externalProperty (t);
        }

        else if (n == ACE_TEXT("locality"))
        {
          locality_value_type t (new ::DAnCE::Config_Handlers::Locality (e));
          add_locality (t);
        }

        else
        {
        }
      }
    }

    // MonolithicImplementationDescription

    MonolithicImplementationDescription::
    MonolithicImplementationDescription (::XSCRT::XML::Element<ACE_TCHAR> const& e)
    :Base (e), regulator__ ()
    {

      ::XSCRT::Parser<ACE_TCHAR> p (e);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element<ACE_TCHAR> e (p.next_element ());
        std::basic_string<ACE_TCHAR> n (::XSCRT::XML::uq_name (e.name ()));

        if (n == ACE_TEXT("nodeExecParameter"))
        {
          nodeExecParameter_value_type t (new ::DAnCE::Config_Handlers::Property (e));
          add_nodeExecParameter (t);
        }

        else if (n == ACE_TEXT("componentExecParameter"))
        {
          componentExecParameter_value_type t (new ::DAnCE::Config_Handlers::Property (e));
          add_componentExecParameter (t);
        }

        else if (n == ACE_TEXT("deployRequirement"))
        {
          deployRequirement_value_type t (new ::DAnCE::Config_Handlers::ImplementationRequirement (e));
          add_deployRequirement (t);
        }

        else if (n == ACE_TEXT("primaryArtifact"))
        {
          primaryArtifact_value_type t (new ::DAnCE::Config_Handlers::NamedImplementationArtifact (e));
          add_primaryArtifact (t);
        }

        else
        {
        }
      }
    }

    // ComponentImplementationDescription

    ComponentImplementationDescription::
    ComponentImplementationDescription (::XSCRT::XML::Element<ACE_TCHAR> const& e)
    :Base (e), regulator__ ()
    {

      ::XSCRT::Parser<ACE_TCHAR> p (e);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element<ACE_TCHAR> e (p.next_element ());
        std::basic_string<ACE_TCHAR> n (::XSCRT::XML::uq_name (e.name ()));

        if (n == ACE_TEXT("label"))
        {
          ::XMLSchema::string<ACE_TCHAR> t (e);
          label (t);
        }

        else if (n == ACE_TEXT("UUID"))
        {
          ::XMLSchema::string<ACE_TCHAR> t (e);
          UUID (t);
        }

        else if (n == ACE_TEXT("implements"))
        {
          ::DAnCE::Config_Handlers::ComponentInterfaceDescription t (e);
          implements (t);
        }

        else if (n == ACE_TEXT("assemblyImpl"))
        {
          ::DAnCE::Config_Handlers::ComponentAssemblyDescription t (e);
          assemblyImpl (t);
        }

        else if (n == ACE_TEXT("monolithicImpl"))
        {
          ::DAnCE::Config_Handlers::MonolithicImplementationDescription t (e);
          monolithicImpl (t);
        }

        else if (n == ACE_TEXT("configProperty"))
        {
          configProperty_value_type t (new ::DAnCE::Config_Handlers::Property (e));
          add_configProperty (t);
        }

        else if (n == ACE_TEXT("capability"))
        {
          capability_value_type t (new ::DAnCE::Config_Handlers::Capability (e));
          add_capability (t);
        }

        else if (n == ACE_TEXT("dependsOn"))
        {
          dependsOn_value_type t (new ::DAnCE::Config_Handlers::ImplementationDependency (e));
          add_dependsOn (t);
        }

        else if (n == ACE_TEXT("infoProperty"))
        {
          infoProperty_value_type t (new ::DAnCE::Config_Handlers::Property (e));
          add_infoProperty (t);
        }

        else
        {
        }
      }

      while (p.more_attributes ())
      {
        ::XSCRT::XML::Attribute<ACE_TCHAR> a (p.next_attribute ());
        std::basic_string<ACE_TCHAR> n (::XSCRT::XML::uq_name (a.name ()));
        if (n == ACE_TEXT ("href"))
        {
          ::XMLSchema::string<ACE_TCHAR> t (a);
          href (t);
        }

        else
        {
        }
      }
    }

    // ConnectorImplementationDescription

    ConnectorImplementationDescription::
    ConnectorImplementationDescription (::XSCRT::XML::Element<ACE_TCHAR> const& e)
    :Base (e), regulator__ ()
    {

      ::XSCRT::Parser<ACE_TCHAR> p (e);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element<ACE_TCHAR> e (p.next_element ());
        std::basic_string<ACE_TCHAR> n (::XSCRT::XML::uq_name (e.name ()));

        if (n == ACE_TEXT("label"))
        {
          ::XMLSchema::string<ACE_TCHAR> t (e);
          label (t);
        }

        else if (n == ACE_TEXT("UUID"))
        {
          ::XMLSchema::string<ACE_TCHAR> t (e);
          UUID (t);
        }

        else if (n == ACE_TEXT("implements"))
        {
          ::DAnCE::Config_Handlers::ComponentInterfaceDescription t (e);
          implements (t);
        }

        else if (n == ACE_TEXT("assemblyImpl"))
        {
          ::DAnCE::Config_Handlers::ComponentAssemblyDescription t (e);
          assemblyImpl (t);
        }

        else if (n == ACE_TEXT("monolithicImpl"))
        {
          ::DAnCE::Config_Handlers::MonolithicImplementationDescription t (e);
          monolithicImpl (t);
        }

        else if (n == ACE_TEXT("configProperty"))
        {
          configProperty_value_type t (new ::DAnCE::Config_Handlers::Property (e));
          add_configProperty (t);
        }

        else if (n == ACE_TEXT("capability"))
        {
          capability_value_type t (new ::DAnCE::Config_Handlers::Capability (e));
          add_capability (t);
        }

        else if (n == ACE_TEXT("dependsOn"))
        {
          dependsOn_value_type t (new ::DAnCE::Config_Handlers::ImplementationDependency (e));
          add_dependsOn (t);
        }

        else if (n == ACE_TEXT("infoProperty"))
        {
          infoProperty_value_type t (new ::DAnCE::Config_Handlers::Property (e));
          add_infoProperty (t);
        }

        else
        {
        }
      }

      while (p.more_attributes ())
      {
        ::XSCRT::XML::Attribute<ACE_TCHAR> a (p.next_attribute ());
        std::basic_string<ACE_TCHAR> n (::XSCRT::XML::uq_name (a.name ()));
        if (n == ACE_TEXT ("href"))
        {
          ::XMLSchema::string<ACE_TCHAR> t (a);
          href (t);
        }

        else
        {
        }
      }
    }
  }
}

namespace DAnCE
{
  namespace Config_Handlers
  {
  }
}

