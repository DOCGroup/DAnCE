/*
 * This code was generated by the XML Schema Compiler.
 *
 * Changes made to this code will most likely be overwritten
 * when the handlers are recompiled.
 *
 * If you find errors or feel that there are bugfixes to be made,
 * please report this to the XSC project at
 * https://github.com/DOCGroup/XSC
 */
#ifndef BASIC_DEPLOYMENT_DATA_HPP
#define BASIC_DEPLOYMENT_DATA_HPP

#include "XSC_XML_Handlers_Export.h"
// Forward declarations.
namespace DAnCE
{
  namespace Config_Handlers
  {
    class IdRef;
    class TCKind;
    class DataType;
    class DataValue;
    class AliasType;
    class EnumType;
    class BoundedStringType;
    class StructType;
    class StructMemberType;
    class ValueType;
    class ValueMemberType;
    class NamedValue;
    class ArrayType;
    class SequenceType;
    class Any;
    class Property;
    class SatisfierPropertyKind;
    class SatisfierProperty;
    class Resource;
    class Requirement;
    class ResourceDeploymentDescription;
    class ArtifactDeploymentDescription;
    class MonolithicDeploymentDescription;
    class ResourceUsageKind;
    class InstanceResourceDeploymentDescription;
    class InstanceDeploymentDescription;
    class CCMComponentPortKind;
    class ComponentPortDescription;
    class ComponentPropertyDescription;
    class ComponentExternalPortEndpoint;
    class PlanSubcomponentPortEndpoint;
    class ExternalReferenceEndpoint;
    class ConnectionResourceDeploymentDescription;
    class PlanConnectionDescription;
    class ImplementationDependency;
    class Capability;
    class ImplementationRequirement;
    class SubcomponentPortEndpoint;
    class AssemblyConnectionDescription;
    class PlanLocalityKind;
    class PlanLocality;
  }
}

#include <memory>
#include <string>
#include <list>
#include "ace/XML_Utils/XMLSchema/Types.hpp"
#include "ace/XML_Utils/XMLSchema/id_map.hpp"
#include "ace/Refcounted_Auto_Ptr.h"
#include "ace/Null_Mutex.h"
#include "ace/ace_wchar.h"

#include "XMI.hpp"

namespace DAnCE
{
  namespace Config_Handlers
  {
    class XSC_XML_Handlers_Export IdRef : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::IdRef, ACE_Null_Mutex> _ptr;

      // href
      public:
      bool href_p () const;
      ::XMLSchema::string<ACE_TCHAR> const& href () const;
      ::XMLSchema::string<ACE_TCHAR>& href ();
      void href (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > href_auto_ptr_type;
      href_auto_ptr_type href_;

      // idref
      public:
      bool idref_p () const;
      ::XMLSchema::IDREF<ACE_TCHAR> const& idref () const;
      ::XMLSchema::IDREF<ACE_TCHAR>& idref ();
      void idref (::XMLSchema::IDREF<ACE_TCHAR> const& );
      ::XSCRT::Type* get_idref_ptr ();

      void set_idref_ptr (const std::basic_string<ACE_TCHAR>& idref);

      protected:
      typedef std::auto_ptr< ::XMLSchema::IDREF<ACE_TCHAR> > idref_auto_ptr_type;
      idref_auto_ptr_type idref_;

      public:
      IdRef ();

      explicit IdRef (::XSCRT::XML::Element<ACE_TCHAR> const&);
      IdRef (IdRef const& s);
      IdRef& operator= (IdRef const& s);
    };


    class XSC_XML_Handlers_Export TCKind : public ::XSCRT::Type
    {
      public:
      explicit TCKind (::XSCRT::XML::Element<ACE_TCHAR> const&);
      explicit TCKind (::XSCRT::XML::Attribute<ACE_TCHAR> const&);

      static TCKind const tk_null;
      static TCKind const tk_void;
      static TCKind const tk_short;
      static TCKind const tk_long;
      static TCKind const tk_ushort;
      static TCKind const tk_ulong;
      static TCKind const tk_float;
      static TCKind const tk_double;
      static TCKind const tk_boolean;
      static TCKind const tk_char;
      static TCKind const tk_octet;
      static TCKind const tk_any;
      static TCKind const tk_TypeCode;
      static TCKind const tk_Principal;
      static TCKind const tk_objref;
      static TCKind const tk_struct;
      static TCKind const tk_union;
      static TCKind const tk_enum;
      static TCKind const tk_string;
      static TCKind const tk_sequence;
      static TCKind const tk_array;
      static TCKind const tk_alias;
      static TCKind const tk_except;
      static TCKind const tk_longlong;
      static TCKind const tk_ulonglong;
      static TCKind const tk_longdouble;
      static TCKind const tk_wchar;
      static TCKind const tk_wstring;
      static TCKind const tk_fixed;
      static TCKind const tk_value;
      static TCKind const tk_value_box;
      static TCKind const tk_native;
      static TCKind const tk_abstract_interface;
      static TCKind const tk_local_interface;
      static TCKind const tk_component;
      static TCKind const tk_home;
      static TCKind const tk_event;

      enum Value
      {
        tk_null_l, tk_void_l, tk_short_l, tk_long_l, tk_ushort_l, tk_ulong_l, tk_float_l, tk_double_l, tk_boolean_l, tk_char_l, tk_octet_l, tk_any_l, tk_TypeCode_l, tk_Principal_l, tk_objref_l, tk_struct_l, tk_union_l, tk_enum_l, tk_string_l, tk_sequence_l, tk_array_l, tk_alias_l, tk_except_l, tk_longlong_l, tk_ulonglong_l, tk_longdouble_l, tk_wchar_l, tk_wstring_l, tk_fixed_l, tk_value_l, tk_value_box_l, tk_native_l, tk_abstract_interface_l, tk_local_interface_l, tk_component_l, tk_home_l, tk_event_l
      };


      Value
      integral () const;

      friend bool XSC_XML_Handlers_Export
      operator== (TCKind const& a, TCKind const& b);

      friend bool XSC_XML_Handlers_Export
      operator!= (TCKind const& a, TCKind const& b);

      private:
      TCKind (Value v);

      Value v_;
    };

    bool XSC_XML_Handlers_Export operator== (TCKind const &a, TCKind const &b);

    bool XSC_XML_Handlers_Export operator!= (TCKind const &a, TCKind const &b);


    class XSC_XML_Handlers_Export DataType : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::DataType, ACE_Null_Mutex> _ptr;

      // kind
      public:
      ::DAnCE::Config_Handlers::TCKind const& kind () const;
      void kind (::DAnCE::Config_Handlers::TCKind const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::TCKind > kind_auto_ptr_type;
      kind_auto_ptr_type kind_;

      // enum
      public:
      bool enum_p () const;
      ::DAnCE::Config_Handlers::EnumType const& enum_ () const;
      void enum_ (::DAnCE::Config_Handlers::EnumType const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::EnumType > enum__auto_ptr_type;
      enum__auto_ptr_type enum__;

      // struct
      public:
      bool struct_p () const;
      ::DAnCE::Config_Handlers::StructType const& struct_ () const;
      void struct_ (::DAnCE::Config_Handlers::StructType const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::StructType > struct__auto_ptr_type;
      struct__auto_ptr_type struct__;

      // value
      public:
      bool value_p () const;
      ::DAnCE::Config_Handlers::ValueType const& value () const;
      void value (::DAnCE::Config_Handlers::ValueType const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::ValueType > value_auto_ptr_type;
      value_auto_ptr_type value_;

      // sequence
      public:
      bool sequence_p () const;
      ::DAnCE::Config_Handlers::SequenceType const& sequence () const;
      void sequence (::DAnCE::Config_Handlers::SequenceType const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::SequenceType > sequence_auto_ptr_type;
      sequence_auto_ptr_type sequence_;

      // alias
      public:
      bool alias_p () const;
      ::DAnCE::Config_Handlers::AliasType const& alias () const;
      void alias (::DAnCE::Config_Handlers::AliasType const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::AliasType > alias_auto_ptr_type;
      alias_auto_ptr_type alias_;

      // array
      public:
      bool array_p () const;
      ::DAnCE::Config_Handlers::ArrayType const& array () const;
      void array (::DAnCE::Config_Handlers::ArrayType const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::ArrayType > array_auto_ptr_type;
      array_auto_ptr_type array_;

      // boundedString
      public:
      bool boundedString_p () const;
      ::DAnCE::Config_Handlers::BoundedStringType const& boundedString () const;
      void boundedString (::DAnCE::Config_Handlers::BoundedStringType const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::BoundedStringType > boundedString_auto_ptr_type;
      boundedString_auto_ptr_type boundedString_;

      // id
      public:
      bool id_p () const;
      ::XMLSchema::ID<ACE_TCHAR> const& id () const;
      ::XMLSchema::ID<ACE_TCHAR>& id ();
      void id (::XMLSchema::ID<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::ID<ACE_TCHAR> > id_auto_ptr_type;
      id_auto_ptr_type id_;

      public:
      DataType (::DAnCE::Config_Handlers::TCKind const& kind__);

      explicit DataType (::XSCRT::XML::Element<ACE_TCHAR> const&);
      DataType (DataType const& s);
      DataType& operator= (DataType const& s);
    };


    class XSC_XML_Handlers_Export DataValue : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::DataValue, ACE_Null_Mutex> _ptr;

      // short
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::XMLSchema::short_, ACE_Null_Mutex> short_value_type;
      typedef std::list<short_value_type> short_container_type;
      typedef short_container_type::iterator short_iterator;
      typedef short_container_type::const_iterator short_const_iterator;
      short_iterator begin_short ();
      short_iterator end_short ();
      short_const_iterator begin_short () const;
      short_const_iterator end_short () const;
      void add_short (short_value_type const&);
      size_t count_short () const;

      protected:
      short_container_type short__;

      // long
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::XMLSchema::int_, ACE_Null_Mutex> long_value_type;
      typedef std::list<long_value_type> long_container_type;
      typedef long_container_type::iterator long_iterator;
      typedef long_container_type::const_iterator long_const_iterator;
      long_iterator begin_long ();
      long_iterator end_long ();
      long_const_iterator begin_long () const;
      long_const_iterator end_long () const;
      void add_long (long_value_type const&);
      size_t count_long () const;

      protected:
      long_container_type long__;

      // ushort
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::XMLSchema::unsignedShort, ACE_Null_Mutex> ushort_value_type;
      typedef std::list<ushort_value_type> ushort_container_type;
      typedef ushort_container_type::iterator ushort_iterator;
      typedef ushort_container_type::const_iterator ushort_const_iterator;
      ushort_iterator begin_ushort ();
      ushort_iterator end_ushort ();
      ushort_const_iterator begin_ushort () const;
      ushort_const_iterator end_ushort () const;
      void add_ushort (ushort_value_type const&);
      size_t count_ushort () const;

      protected:
      ushort_container_type ushort_;

      // ulong
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::XMLSchema::unsignedInt, ACE_Null_Mutex> ulong_value_type;
      typedef std::list<ulong_value_type> ulong_container_type;
      typedef ulong_container_type::iterator ulong_iterator;
      typedef ulong_container_type::const_iterator ulong_const_iterator;
      ulong_iterator begin_ulong ();
      ulong_iterator end_ulong ();
      ulong_const_iterator begin_ulong () const;
      ulong_const_iterator end_ulong () const;
      void add_ulong (ulong_value_type const&);
      size_t count_ulong () const;

      protected:
      ulong_container_type ulong_;

      // float
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::XMLSchema::float_, ACE_Null_Mutex> float_value_type;
      typedef std::list<float_value_type> float_container_type;
      typedef float_container_type::iterator float_iterator;
      typedef float_container_type::const_iterator float_const_iterator;
      float_iterator begin_float ();
      float_iterator end_float ();
      float_const_iterator begin_float () const;
      float_const_iterator end_float () const;
      void add_float (float_value_type const&);
      size_t count_float () const;

      protected:
      float_container_type float__;

      // double
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::XMLSchema::double_, ACE_Null_Mutex> double_value_type;
      typedef std::list<double_value_type> double_container_type;
      typedef double_container_type::iterator double_iterator;
      typedef double_container_type::const_iterator double_const_iterator;
      double_iterator begin_double ();
      double_iterator end_double ();
      double_const_iterator begin_double () const;
      double_const_iterator end_double () const;
      void add_double (double_value_type const&);
      size_t count_double () const;

      protected:
      double_container_type double__;

      // boolean
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::XMLSchema::boolean, ACE_Null_Mutex> boolean_value_type;
      typedef std::list<boolean_value_type> boolean_container_type;
      typedef boolean_container_type::iterator boolean_iterator;
      typedef boolean_container_type::const_iterator boolean_const_iterator;
      boolean_iterator begin_boolean ();
      boolean_iterator end_boolean ();
      boolean_const_iterator begin_boolean () const;
      boolean_const_iterator end_boolean () const;
      void add_boolean (boolean_value_type const&);
      size_t count_boolean () const;

      protected:
      boolean_container_type boolean_;

      // octet
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::XMLSchema::unsignedByte, ACE_Null_Mutex> octet_value_type;
      typedef std::list<octet_value_type> octet_container_type;
      typedef octet_container_type::iterator octet_iterator;
      typedef octet_container_type::const_iterator octet_const_iterator;
      octet_iterator begin_octet ();
      octet_iterator end_octet ();
      octet_const_iterator begin_octet () const;
      octet_const_iterator end_octet () const;
      void add_octet (octet_value_type const&);
      size_t count_octet () const;

      protected:
      octet_container_type octet_;

      // enum
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::XMLSchema::string<ACE_TCHAR>, ACE_Null_Mutex> enum_value_type;
      typedef std::list<enum_value_type> enum_container_type;
      typedef enum_container_type::iterator enum_iterator;
      typedef enum_container_type::const_iterator enum_const_iterator;
      enum_iterator begin_enum ();
      enum_iterator end_enum ();
      enum_const_iterator begin_enum () const;
      enum_const_iterator end_enum () const;
      void add_enum (enum_value_type const&);
      size_t count_enum () const;

      protected:
      enum_container_type enum__;

      // string
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::XMLSchema::string<ACE_TCHAR>, ACE_Null_Mutex> string_value_type;
      typedef std::list<string_value_type> string_container_type;
      typedef string_container_type::iterator string_iterator;
      typedef string_container_type::const_iterator string_const_iterator;
      string_iterator begin_string ();
      string_iterator end_string ();
      string_const_iterator begin_string () const;
      string_const_iterator end_string () const;
      void add_string (string_value_type const&);
      size_t count_string () const;

      protected:
      string_container_type string_;

      // longlong
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::XMLSchema::long_, ACE_Null_Mutex> longlong_value_type;
      typedef std::list<longlong_value_type> longlong_container_type;
      typedef longlong_container_type::iterator longlong_iterator;
      typedef longlong_container_type::const_iterator longlong_const_iterator;
      longlong_iterator begin_longlong ();
      longlong_iterator end_longlong ();
      longlong_const_iterator begin_longlong () const;
      longlong_const_iterator end_longlong () const;
      void add_longlong (longlong_value_type const&);
      size_t count_longlong () const;

      protected:
      longlong_container_type longlong_;

      // ulonglong
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::XMLSchema::unsignedLong, ACE_Null_Mutex> ulonglong_value_type;
      typedef std::list<ulonglong_value_type> ulonglong_container_type;
      typedef ulonglong_container_type::iterator ulonglong_iterator;
      typedef ulonglong_container_type::const_iterator ulonglong_const_iterator;
      ulonglong_iterator begin_ulonglong ();
      ulonglong_iterator end_ulonglong ();
      ulonglong_const_iterator begin_ulonglong () const;
      ulonglong_const_iterator end_ulonglong () const;
      void add_ulonglong (ulonglong_value_type const&);
      size_t count_ulonglong () const;

      protected:
      ulonglong_container_type ulonglong_;

      // longdouble
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::XMLSchema::double_, ACE_Null_Mutex> longdouble_value_type;
      typedef std::list<longdouble_value_type> longdouble_container_type;
      typedef longdouble_container_type::iterator longdouble_iterator;
      typedef longdouble_container_type::const_iterator longdouble_const_iterator;
      longdouble_iterator begin_longdouble ();
      longdouble_iterator end_longdouble ();
      longdouble_const_iterator begin_longdouble () const;
      longdouble_const_iterator end_longdouble () const;
      void add_longdouble (longdouble_value_type const&);
      size_t count_longdouble () const;

      protected:
      longdouble_container_type longdouble_;

      // element
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::DataValue, ACE_Null_Mutex> element_value_type;
      typedef std::list<element_value_type> element_container_type;
      typedef element_container_type::iterator element_iterator;
      typedef element_container_type::const_iterator element_const_iterator;
      element_iterator begin_element ();
      element_iterator end_element ();
      element_const_iterator begin_element () const;
      element_const_iterator end_element () const;
      void add_element (element_value_type const&);
      size_t count_element () const;

      protected:
      element_container_type element_;

      // member
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::NamedValue, ACE_Null_Mutex> member_value_type;
      typedef std::list<member_value_type> member_container_type;
      typedef member_container_type::iterator member_iterator;
      typedef member_container_type::const_iterator member_const_iterator;
      member_iterator begin_member ();
      member_iterator end_member ();
      member_const_iterator begin_member () const;
      member_const_iterator end_member () const;
      void add_member (member_value_type const&);
      size_t count_member () const;

      protected:
      member_container_type member_;

      public:
      DataValue ();

      explicit DataValue (::XSCRT::XML::Element<ACE_TCHAR> const&);
      DataValue (DataValue const& s);
      DataValue& operator= (DataValue const& s);
    };


    class XSC_XML_Handlers_Export AliasType : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::AliasType, ACE_Null_Mutex> _ptr;

      // name
      public:
      ::XMLSchema::string<ACE_TCHAR> const& name () const;
      void name (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > name_auto_ptr_type;
      name_auto_ptr_type name_;

      // typeId
      public:
      ::XMLSchema::string<ACE_TCHAR> const& typeId () const;
      void typeId (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > typeId_auto_ptr_type;
      typeId_auto_ptr_type typeId_;

      // elementType
      public:
      ::DAnCE::Config_Handlers::DataType const& elementType () const;
      void elementType (::DAnCE::Config_Handlers::DataType const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::DataType > elementType_auto_ptr_type;
      elementType_auto_ptr_type elementType_;

      public:
      AliasType (::XMLSchema::string<ACE_TCHAR> const& name__,
                 ::XMLSchema::string<ACE_TCHAR> const& typeId__,
                 ::DAnCE::Config_Handlers::DataType const& elementType__);

      explicit AliasType (::XSCRT::XML::Element<ACE_TCHAR> const&);
      AliasType (AliasType const& s);
      AliasType& operator= (AliasType const& s);
    };


    class XSC_XML_Handlers_Export EnumType : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::EnumType, ACE_Null_Mutex> _ptr;

      // name
      public:
      ::XMLSchema::string<ACE_TCHAR> const& name () const;
      void name (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > name_auto_ptr_type;
      name_auto_ptr_type name_;

      // typeId
      public:
      ::XMLSchema::string<ACE_TCHAR> const& typeId () const;
      void typeId (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > typeId_auto_ptr_type;
      typeId_auto_ptr_type typeId_;

      // member
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::XMLSchema::string<ACE_TCHAR>, ACE_Null_Mutex> member_value_type;
      typedef std::list<member_value_type> member_container_type;
      typedef member_container_type::iterator member_iterator;
      typedef member_container_type::const_iterator member_const_iterator;
      member_iterator begin_member ();
      member_iterator end_member ();
      member_const_iterator begin_member () const;
      member_const_iterator end_member () const;
      void add_member (member_value_type const&);
      size_t count_member () const;

      protected:
      member_container_type member_;

      public:
      EnumType (::XMLSchema::string<ACE_TCHAR> const& name__,
                ::XMLSchema::string<ACE_TCHAR> const& typeId__,
                member_container_type const& member__);

      explicit EnumType (::XSCRT::XML::Element<ACE_TCHAR> const&);
      EnumType (EnumType const& s);
      EnumType& operator= (EnumType const& s);
    };


    class XSC_XML_Handlers_Export BoundedStringType : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::BoundedStringType, ACE_Null_Mutex> _ptr;

      // bound
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::XMLSchema::unsignedInt, ACE_Null_Mutex> bound_value_type;
      typedef std::list<bound_value_type> bound_container_type;
      typedef bound_container_type::iterator bound_iterator;
      typedef bound_container_type::const_iterator bound_const_iterator;
      bound_iterator begin_bound ();
      bound_iterator end_bound ();
      bound_const_iterator begin_bound () const;
      bound_const_iterator end_bound () const;
      void add_bound (bound_value_type const&);
      size_t count_bound () const;

      protected:
      bound_container_type bound_;

      public:
      BoundedStringType ();

      explicit BoundedStringType (::XSCRT::XML::Element<ACE_TCHAR> const&);
      BoundedStringType (BoundedStringType const& s);
      BoundedStringType& operator= (BoundedStringType const& s);
    };


    class XSC_XML_Handlers_Export StructType : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::StructType, ACE_Null_Mutex> _ptr;

      // name
      public:
      ::XMLSchema::string<ACE_TCHAR> const& name () const;
      void name (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > name_auto_ptr_type;
      name_auto_ptr_type name_;

      // typeId
      public:
      ::XMLSchema::string<ACE_TCHAR> const& typeId () const;
      void typeId (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > typeId_auto_ptr_type;
      typeId_auto_ptr_type typeId_;

      // member
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::StructMemberType, ACE_Null_Mutex> member_value_type;
      typedef std::list<member_value_type> member_container_type;
      typedef member_container_type::iterator member_iterator;
      typedef member_container_type::const_iterator member_const_iterator;
      member_iterator begin_member ();
      member_iterator end_member ();
      member_const_iterator begin_member () const;
      member_const_iterator end_member () const;
      void add_member (member_value_type const&);
      size_t count_member () const;

      protected:
      member_container_type member_;

      public:
      StructType (::XMLSchema::string<ACE_TCHAR> const& name__,
                  ::XMLSchema::string<ACE_TCHAR> const& typeId__);

      explicit StructType (::XSCRT::XML::Element<ACE_TCHAR> const&);
      StructType (StructType const& s);
      StructType& operator= (StructType const& s);
    };


    class XSC_XML_Handlers_Export StructMemberType : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::StructMemberType, ACE_Null_Mutex> _ptr;

      // name
      public:
      ::XMLSchema::string<ACE_TCHAR> const& name () const;
      void name (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > name_auto_ptr_type;
      name_auto_ptr_type name_;

      // type
      public:
      ::DAnCE::Config_Handlers::DataType const& type () const;
      void type (::DAnCE::Config_Handlers::DataType const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::DataType > type_auto_ptr_type;
      type_auto_ptr_type type_;

      public:
      StructMemberType (::XMLSchema::string<ACE_TCHAR> const& name__,
                        ::DAnCE::Config_Handlers::DataType const& type__);

      explicit StructMemberType (::XSCRT::XML::Element<ACE_TCHAR> const&);
      StructMemberType (StructMemberType const& s);
      StructMemberType& operator= (StructMemberType const& s);
    };


    class XSC_XML_Handlers_Export ValueType : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::ValueType, ACE_Null_Mutex> _ptr;

      // name
      public:
      ::XMLSchema::string<ACE_TCHAR> const& name () const;
      void name (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > name_auto_ptr_type;
      name_auto_ptr_type name_;

      // typeId
      public:
      ::XMLSchema::string<ACE_TCHAR> const& typeId () const;
      void typeId (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > typeId_auto_ptr_type;
      typeId_auto_ptr_type typeId_;

      // modifier
      public:
      ::XMLSchema::string<ACE_TCHAR> const& modifier () const;
      void modifier (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > modifier_auto_ptr_type;
      modifier_auto_ptr_type modifier_;

      // baseType
      public:
      ::DAnCE::Config_Handlers::DataType const& baseType () const;
      void baseType (::DAnCE::Config_Handlers::DataType const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::DataType > baseType_auto_ptr_type;
      baseType_auto_ptr_type baseType_;

      // member
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::ValueMemberType, ACE_Null_Mutex> member_value_type;
      typedef std::list<member_value_type> member_container_type;
      typedef member_container_type::iterator member_iterator;
      typedef member_container_type::const_iterator member_const_iterator;
      member_iterator begin_member ();
      member_iterator end_member ();
      member_const_iterator begin_member () const;
      member_const_iterator end_member () const;
      void add_member (member_value_type const&);
      size_t count_member () const;

      protected:
      member_container_type member_;

      public:
      ValueType (::XMLSchema::string<ACE_TCHAR> const& name__,
                 ::XMLSchema::string<ACE_TCHAR> const& typeId__,
                 ::XMLSchema::string<ACE_TCHAR> const& modifier__,
                 ::DAnCE::Config_Handlers::DataType const& baseType__);

      explicit ValueType (::XSCRT::XML::Element<ACE_TCHAR> const&);
      ValueType (ValueType const& s);
      ValueType& operator= (ValueType const& s);
    };


    class XSC_XML_Handlers_Export ValueMemberType : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::ValueMemberType, ACE_Null_Mutex> _ptr;

      // name
      public:
      ::XMLSchema::string<ACE_TCHAR> const& name () const;
      void name (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > name_auto_ptr_type;
      name_auto_ptr_type name_;

      // visibility
      public:
      ::XMLSchema::string<ACE_TCHAR> const& visibility () const;
      void visibility (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > visibility_auto_ptr_type;
      visibility_auto_ptr_type visibility_;

      // type
      public:
      ::DAnCE::Config_Handlers::DataType const& type () const;
      void type (::DAnCE::Config_Handlers::DataType const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::DataType > type_auto_ptr_type;
      type_auto_ptr_type type_;

      public:
      ValueMemberType (::XMLSchema::string<ACE_TCHAR> const& name__,
                       ::XMLSchema::string<ACE_TCHAR> const& visibility__,
                       ::DAnCE::Config_Handlers::DataType const& type__);

      explicit ValueMemberType (::XSCRT::XML::Element<ACE_TCHAR> const&);
      ValueMemberType (ValueMemberType const& s);
      ValueMemberType& operator= (ValueMemberType const& s);
    };


    class XSC_XML_Handlers_Export NamedValue : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::NamedValue, ACE_Null_Mutex> _ptr;

      // name
      public:
      ::XMLSchema::string<ACE_TCHAR> const& name () const;
      void name (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > name_auto_ptr_type;
      name_auto_ptr_type name_;

      // value
      public:
      ::DAnCE::Config_Handlers::DataValue const& value () const;
      void value (::DAnCE::Config_Handlers::DataValue const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::DataValue > value_auto_ptr_type;
      value_auto_ptr_type value_;

      public:
      NamedValue (::XMLSchema::string<ACE_TCHAR> const& name__,
                  ::DAnCE::Config_Handlers::DataValue const& value__);

      explicit NamedValue (::XSCRT::XML::Element<ACE_TCHAR> const&);
      NamedValue (NamedValue const& s);
      NamedValue& operator= (NamedValue const& s);
    };


    class XSC_XML_Handlers_Export ArrayType : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::ArrayType, ACE_Null_Mutex> _ptr;

      // length
      public:
      ::XMLSchema::unsignedInt const& length () const;
      void length (::XMLSchema::unsignedInt const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::unsignedInt > length_auto_ptr_type;
      length_auto_ptr_type length_;

      // elementType
      public:
      ::DAnCE::Config_Handlers::DataType const& elementType () const;
      void elementType (::DAnCE::Config_Handlers::DataType const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::DataType > elementType_auto_ptr_type;
      elementType_auto_ptr_type elementType_;

      public:
      ArrayType (::XMLSchema::unsignedInt const& length__,
                 ::DAnCE::Config_Handlers::DataType const& elementType__);

      explicit ArrayType (::XSCRT::XML::Element<ACE_TCHAR> const&);
      ArrayType (ArrayType const& s);
      ArrayType& operator= (ArrayType const& s);
    };


    class XSC_XML_Handlers_Export SequenceType : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::SequenceType, ACE_Null_Mutex> _ptr;

      // bound
      public:
      bool bound_p () const;
      ::XMLSchema::unsignedInt const& bound () const;
      void bound (::XMLSchema::unsignedInt const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::unsignedInt > bound_auto_ptr_type;
      bound_auto_ptr_type bound_;

      // elementType
      public:
      ::DAnCE::Config_Handlers::DataType const& elementType () const;
      void elementType (::DAnCE::Config_Handlers::DataType const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::DataType > elementType_auto_ptr_type;
      elementType_auto_ptr_type elementType_;

      public:
      SequenceType (::DAnCE::Config_Handlers::DataType const& elementType__);

      explicit SequenceType (::XSCRT::XML::Element<ACE_TCHAR> const&);
      SequenceType (SequenceType const& s);
      SequenceType& operator= (SequenceType const& s);
    };


    class XSC_XML_Handlers_Export Any : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Any, ACE_Null_Mutex> _ptr;

      // type
      public:
      ::DAnCE::Config_Handlers::DataType const& type () const;
      void type (::DAnCE::Config_Handlers::DataType const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::DataType > type_auto_ptr_type;
      type_auto_ptr_type type_;

      // value
      public:
      ::DAnCE::Config_Handlers::DataValue const& value () const;
      void value (::DAnCE::Config_Handlers::DataValue const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::DataValue > value_auto_ptr_type;
      value_auto_ptr_type value_;

      public:
      Any (::DAnCE::Config_Handlers::DataType const& type__,
           ::DAnCE::Config_Handlers::DataValue const& value__);

      explicit Any (::XSCRT::XML::Element<ACE_TCHAR> const&);
      Any (Any const& s);
      Any& operator= (Any const& s);
    };


    class XSC_XML_Handlers_Export Property : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Property, ACE_Null_Mutex> _ptr;

      // name
      public:
      ::XMLSchema::string<ACE_TCHAR> const& name () const;
      void name (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > name_auto_ptr_type;
      name_auto_ptr_type name_;

      // value
      public:
      ::DAnCE::Config_Handlers::Any const& value () const;
      void value (::DAnCE::Config_Handlers::Any const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::Any > value_auto_ptr_type;
      value_auto_ptr_type value_;

      public:
      Property (::XMLSchema::string<ACE_TCHAR> const& name__,
                ::DAnCE::Config_Handlers::Any const& value__);

      explicit Property (::XSCRT::XML::Element<ACE_TCHAR> const&);
      Property (Property const& s);
      Property& operator= (Property const& s);
    };


    class XSC_XML_Handlers_Export SatisfierPropertyKind : public ::XSCRT::Type
    {
      public:
      explicit SatisfierPropertyKind (::XSCRT::XML::Element<ACE_TCHAR> const&);
      explicit SatisfierPropertyKind (::XSCRT::XML::Attribute<ACE_TCHAR> const&);

      static SatisfierPropertyKind const Quantity;
      static SatisfierPropertyKind const Capacity;
      static SatisfierPropertyKind const Minimum;
      static SatisfierPropertyKind const Maximum;
      static SatisfierPropertyKind const Attribute;
      static SatisfierPropertyKind const Selection;

      enum Value
      {
        Quantity_l, Capacity_l, Minimum_l, Maximum_l, Attribute_l, Selection_l
      };


      Value
      integral () const;

      friend bool XSC_XML_Handlers_Export
      operator== (SatisfierPropertyKind const& a, SatisfierPropertyKind const& b);

      friend bool XSC_XML_Handlers_Export
      operator!= (SatisfierPropertyKind const& a, SatisfierPropertyKind const& b);

      private:
      SatisfierPropertyKind (Value v);

      Value v_;
    };

    bool XSC_XML_Handlers_Export operator== (SatisfierPropertyKind const &a, SatisfierPropertyKind const &b);

    bool XSC_XML_Handlers_Export operator!= (SatisfierPropertyKind const &a, SatisfierPropertyKind const &b);


    class XSC_XML_Handlers_Export SatisfierProperty : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::SatisfierProperty, ACE_Null_Mutex> _ptr;

      // name
      public:
      ::XMLSchema::string<ACE_TCHAR> const& name () const;
      void name (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > name_auto_ptr_type;
      name_auto_ptr_type name_;

      // kind
      public:
      ::DAnCE::Config_Handlers::SatisfierPropertyKind const& kind () const;
      void kind (::DAnCE::Config_Handlers::SatisfierPropertyKind const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::SatisfierPropertyKind > kind_auto_ptr_type;
      kind_auto_ptr_type kind_;

      // dynamic
      public:
      ::XMLSchema::boolean const& dynamic () const;
      void dynamic (::XMLSchema::boolean const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::boolean > dynamic_auto_ptr_type;
      dynamic_auto_ptr_type dynamic_;

      // value
      public:
      ::DAnCE::Config_Handlers::Any const& value () const;
      void value (::DAnCE::Config_Handlers::Any const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::Any > value_auto_ptr_type;
      value_auto_ptr_type value_;

      public:
      SatisfierProperty (::XMLSchema::string<ACE_TCHAR> const& name__,
                         ::DAnCE::Config_Handlers::SatisfierPropertyKind const& kind__,
                         ::XMLSchema::boolean const& dynamic__,
                         ::DAnCE::Config_Handlers::Any const& value__);

      explicit SatisfierProperty (::XSCRT::XML::Element<ACE_TCHAR> const&);
      SatisfierProperty (SatisfierProperty const& s);
      SatisfierProperty& operator= (SatisfierProperty const& s);
    };


    class XSC_XML_Handlers_Export Resource : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Resource, ACE_Null_Mutex> _ptr;

      // name
      public:
      ::XMLSchema::string<ACE_TCHAR> const& name () const;
      void name (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > name_auto_ptr_type;
      name_auto_ptr_type name_;

      // resourceType
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::XMLSchema::string<ACE_TCHAR>, ACE_Null_Mutex> resourceType_value_type;
      typedef std::list<resourceType_value_type> resourceType_container_type;
      typedef resourceType_container_type::iterator resourceType_iterator;
      typedef resourceType_container_type::const_iterator resourceType_const_iterator;
      resourceType_iterator begin_resourceType ();
      resourceType_iterator end_resourceType ();
      resourceType_const_iterator begin_resourceType () const;
      resourceType_const_iterator end_resourceType () const;
      void add_resourceType (resourceType_value_type const&);
      size_t count_resourceType () const;

      protected:
      resourceType_container_type resourceType_;

      // property
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::SatisfierProperty, ACE_Null_Mutex> property_value_type;
      typedef std::list<property_value_type> property_container_type;
      typedef property_container_type::iterator property_iterator;
      typedef property_container_type::const_iterator property_const_iterator;
      property_iterator begin_property ();
      property_iterator end_property ();
      property_const_iterator begin_property () const;
      property_const_iterator end_property () const;
      void add_property (property_value_type const&);
      size_t count_property () const;

      protected:
      property_container_type property_;

      public:
      Resource (::XMLSchema::string<ACE_TCHAR> const& name__,
                resourceType_container_type const& resourceType__);

      explicit Resource (::XSCRT::XML::Element<ACE_TCHAR> const&);
      Resource (Resource const& s);
      Resource& operator= (Resource const& s);
    };


    class XSC_XML_Handlers_Export Requirement : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Requirement, ACE_Null_Mutex> _ptr;

      // name
      public:
      ::XMLSchema::string<ACE_TCHAR> const& name () const;
      void name (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > name_auto_ptr_type;
      name_auto_ptr_type name_;

      // resourceType
      public:
      ::XMLSchema::string<ACE_TCHAR> const& resourceType () const;
      void resourceType (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > resourceType_auto_ptr_type;
      resourceType_auto_ptr_type resourceType_;

      // property
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Property, ACE_Null_Mutex> property_value_type;
      typedef std::list<property_value_type> property_container_type;
      typedef property_container_type::iterator property_iterator;
      typedef property_container_type::const_iterator property_const_iterator;
      property_iterator begin_property ();
      property_iterator end_property ();
      property_const_iterator begin_property () const;
      property_const_iterator end_property () const;
      void add_property (property_value_type const&);
      size_t count_property () const;

      protected:
      property_container_type property_;

      public:
      Requirement (::XMLSchema::string<ACE_TCHAR> const& name__,
                   ::XMLSchema::string<ACE_TCHAR> const& resourceType__);

      explicit Requirement (::XSCRT::XML::Element<ACE_TCHAR> const&);
      Requirement (Requirement const& s);
      Requirement& operator= (Requirement const& s);
    };


    class XSC_XML_Handlers_Export ResourceDeploymentDescription : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::ResourceDeploymentDescription, ACE_Null_Mutex> _ptr;

      // requirementName
      public:
      ::XMLSchema::string<ACE_TCHAR> const& requirementName () const;
      void requirementName (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > requirementName_auto_ptr_type;
      requirementName_auto_ptr_type requirementName_;

      // resourceName
      public:
      ::XMLSchema::string<ACE_TCHAR> const& resourceName () const;
      void resourceName (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > resourceName_auto_ptr_type;
      resourceName_auto_ptr_type resourceName_;

      // property
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Property, ACE_Null_Mutex> property_value_type;
      typedef std::list<property_value_type> property_container_type;
      typedef property_container_type::iterator property_iterator;
      typedef property_container_type::const_iterator property_const_iterator;
      property_iterator begin_property ();
      property_iterator end_property ();
      property_const_iterator begin_property () const;
      property_const_iterator end_property () const;
      void add_property (property_value_type const&);
      size_t count_property () const;

      protected:
      property_container_type property_;

      public:
      ResourceDeploymentDescription (::XMLSchema::string<ACE_TCHAR> const& requirementName__,
                                     ::XMLSchema::string<ACE_TCHAR> const& resourceName__);

      explicit ResourceDeploymentDescription (::XSCRT::XML::Element<ACE_TCHAR> const&);
      ResourceDeploymentDescription (ResourceDeploymentDescription const& s);
      ResourceDeploymentDescription& operator= (ResourceDeploymentDescription const& s);
    };


    class XSC_XML_Handlers_Export ArtifactDeploymentDescription : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::ArtifactDeploymentDescription, ACE_Null_Mutex> _ptr;

      // name
      public:
      ::XMLSchema::string<ACE_TCHAR> const& name () const;
      void name (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > name_auto_ptr_type;
      name_auto_ptr_type name_;

      // source
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::XMLSchema::string<ACE_TCHAR>, ACE_Null_Mutex> source_value_type;
      typedef std::list<source_value_type> source_container_type;
      typedef source_container_type::iterator source_iterator;
      typedef source_container_type::const_iterator source_const_iterator;
      source_iterator begin_source ();
      source_iterator end_source ();
      source_const_iterator begin_source () const;
      source_const_iterator end_source () const;
      void add_source (source_value_type const&);
      size_t count_source () const;

      protected:
      source_container_type source_;

      // node
      public:
      ::XMLSchema::string<ACE_TCHAR> const& node () const;
      void node (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > node_auto_ptr_type;
      node_auto_ptr_type node_;

      // location
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::XMLSchema::string<ACE_TCHAR>, ACE_Null_Mutex> location_value_type;
      typedef std::list<location_value_type> location_container_type;
      typedef location_container_type::iterator location_iterator;
      typedef location_container_type::const_iterator location_const_iterator;
      location_iterator begin_location ();
      location_iterator end_location ();
      location_const_iterator begin_location () const;
      location_const_iterator end_location () const;
      void add_location (location_value_type const&);
      size_t count_location () const;

      protected:
      location_container_type location_;

      // execParameter
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Property, ACE_Null_Mutex> execParameter_value_type;
      typedef std::list<execParameter_value_type> execParameter_container_type;
      typedef execParameter_container_type::iterator execParameter_iterator;
      typedef execParameter_container_type::const_iterator execParameter_const_iterator;
      execParameter_iterator begin_execParameter ();
      execParameter_iterator end_execParameter ();
      execParameter_const_iterator begin_execParameter () const;
      execParameter_const_iterator end_execParameter () const;
      void add_execParameter (execParameter_value_type const&);
      size_t count_execParameter () const;

      protected:
      execParameter_container_type execParameter_;

      // deployRequirement
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Requirement, ACE_Null_Mutex> deployRequirement_value_type;
      typedef std::list<deployRequirement_value_type> deployRequirement_container_type;
      typedef deployRequirement_container_type::iterator deployRequirement_iterator;
      typedef deployRequirement_container_type::const_iterator deployRequirement_const_iterator;
      deployRequirement_iterator begin_deployRequirement ();
      deployRequirement_iterator end_deployRequirement ();
      deployRequirement_const_iterator begin_deployRequirement () const;
      deployRequirement_const_iterator end_deployRequirement () const;
      void add_deployRequirement (deployRequirement_value_type const&);
      size_t count_deployRequirement () const;

      protected:
      deployRequirement_container_type deployRequirement_;

      // deployedResource
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::ResourceDeploymentDescription, ACE_Null_Mutex> deployedResource_value_type;
      typedef std::list<deployedResource_value_type> deployedResource_container_type;
      typedef deployedResource_container_type::iterator deployedResource_iterator;
      typedef deployedResource_container_type::const_iterator deployedResource_const_iterator;
      deployedResource_iterator begin_deployedResource ();
      deployedResource_iterator end_deployedResource ();
      deployedResource_const_iterator begin_deployedResource () const;
      deployedResource_const_iterator end_deployedResource () const;
      void add_deployedResource (deployedResource_value_type const&);
      size_t count_deployedResource () const;

      protected:
      deployedResource_container_type deployedResource_;

      // id
      public:
      bool id_p () const;
      ::XMLSchema::ID<ACE_TCHAR> const& id () const;
      ::XMLSchema::ID<ACE_TCHAR>& id ();
      void id (::XMLSchema::ID<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::ID<ACE_TCHAR> > id_auto_ptr_type;
      id_auto_ptr_type id_;

      public:
      ArtifactDeploymentDescription (::XMLSchema::string<ACE_TCHAR> const& name__,
                                     ::XMLSchema::string<ACE_TCHAR> const& node__);

      explicit ArtifactDeploymentDescription (::XSCRT::XML::Element<ACE_TCHAR> const&);
      ArtifactDeploymentDescription (ArtifactDeploymentDescription const& s);
      ArtifactDeploymentDescription& operator= (ArtifactDeploymentDescription const& s);
    };


    class XSC_XML_Handlers_Export MonolithicDeploymentDescription : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::MonolithicDeploymentDescription, ACE_Null_Mutex> _ptr;

      // name
      public:
      ::XMLSchema::string<ACE_TCHAR> const& name () const;
      void name (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > name_auto_ptr_type;
      name_auto_ptr_type name_;

      // source
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::XMLSchema::string<ACE_TCHAR>, ACE_Null_Mutex> source_value_type;
      typedef std::list<source_value_type> source_container_type;
      typedef source_container_type::iterator source_iterator;
      typedef source_container_type::const_iterator source_const_iterator;
      source_iterator begin_source ();
      source_iterator end_source ();
      source_const_iterator begin_source () const;
      source_const_iterator end_source () const;
      void add_source (source_value_type const&);
      size_t count_source () const;

      protected:
      source_container_type source_;

      // artifact
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::IdRef, ACE_Null_Mutex> artifact_value_type;
      typedef std::list<artifact_value_type> artifact_container_type;
      typedef artifact_container_type::iterator artifact_iterator;
      typedef artifact_container_type::const_iterator artifact_const_iterator;
      artifact_iterator begin_artifact ();
      artifact_iterator end_artifact ();
      artifact_const_iterator begin_artifact () const;
      artifact_const_iterator end_artifact () const;
      void add_artifact (artifact_value_type const&);
      size_t count_artifact () const;

      protected:
      artifact_container_type artifact_;

      // execParameter
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Property, ACE_Null_Mutex> execParameter_value_type;
      typedef std::list<execParameter_value_type> execParameter_container_type;
      typedef execParameter_container_type::iterator execParameter_iterator;
      typedef execParameter_container_type::const_iterator execParameter_const_iterator;
      execParameter_iterator begin_execParameter ();
      execParameter_iterator end_execParameter ();
      execParameter_const_iterator begin_execParameter () const;
      execParameter_const_iterator end_execParameter () const;
      void add_execParameter (execParameter_value_type const&);
      size_t count_execParameter () const;

      protected:
      execParameter_container_type execParameter_;

      // deployRequirement
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Requirement, ACE_Null_Mutex> deployRequirement_value_type;
      typedef std::list<deployRequirement_value_type> deployRequirement_container_type;
      typedef deployRequirement_container_type::iterator deployRequirement_iterator;
      typedef deployRequirement_container_type::const_iterator deployRequirement_const_iterator;
      deployRequirement_iterator begin_deployRequirement ();
      deployRequirement_iterator end_deployRequirement ();
      deployRequirement_const_iterator begin_deployRequirement () const;
      deployRequirement_const_iterator end_deployRequirement () const;
      void add_deployRequirement (deployRequirement_value_type const&);
      size_t count_deployRequirement () const;

      protected:
      deployRequirement_container_type deployRequirement_;

      // id
      public:
      bool id_p () const;
      ::XMLSchema::ID<ACE_TCHAR> const& id () const;
      ::XMLSchema::ID<ACE_TCHAR>& id ();
      void id (::XMLSchema::ID<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::ID<ACE_TCHAR> > id_auto_ptr_type;
      id_auto_ptr_type id_;

      public:
      MonolithicDeploymentDescription (::XMLSchema::string<ACE_TCHAR> const& name__);

      explicit MonolithicDeploymentDescription (::XSCRT::XML::Element<ACE_TCHAR> const&);
      MonolithicDeploymentDescription (MonolithicDeploymentDescription const& s);
      MonolithicDeploymentDescription& operator= (MonolithicDeploymentDescription const& s);
    };


    class XSC_XML_Handlers_Export ResourceUsageKind : public ::XSCRT::Type
    {
      public:
      explicit ResourceUsageKind (::XSCRT::XML::Element<ACE_TCHAR> const&);
      explicit ResourceUsageKind (::XSCRT::XML::Attribute<ACE_TCHAR> const&);

      static ResourceUsageKind const None;
      static ResourceUsageKind const InstanceUsesResource;
      static ResourceUsageKind const ResourceUsesInstance;
      static ResourceUsageKind const PortUsesResource;
      static ResourceUsageKind const ResourceUsesPort;

      enum Value
      {
        None_l, InstanceUsesResource_l, ResourceUsesInstance_l, PortUsesResource_l, ResourceUsesPort_l
      };


      Value
      integral () const;

      friend bool XSC_XML_Handlers_Export
      operator== (ResourceUsageKind const& a, ResourceUsageKind const& b);

      friend bool XSC_XML_Handlers_Export
      operator!= (ResourceUsageKind const& a, ResourceUsageKind const& b);

      private:
      ResourceUsageKind (Value v);

      Value v_;
    };

    bool XSC_XML_Handlers_Export operator== (ResourceUsageKind const &a, ResourceUsageKind const &b);

    bool XSC_XML_Handlers_Export operator!= (ResourceUsageKind const &a, ResourceUsageKind const &b);


    class XSC_XML_Handlers_Export InstanceResourceDeploymentDescription : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::InstanceResourceDeploymentDescription, ACE_Null_Mutex> _ptr;

      // resourceUsage
      public:
      ::DAnCE::Config_Handlers::ResourceUsageKind const& resourceUsage () const;
      void resourceUsage (::DAnCE::Config_Handlers::ResourceUsageKind const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::ResourceUsageKind > resourceUsage_auto_ptr_type;
      resourceUsage_auto_ptr_type resourceUsage_;

      // requirementName
      public:
      ::XMLSchema::string<ACE_TCHAR> const& requirementName () const;
      void requirementName (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > requirementName_auto_ptr_type;
      requirementName_auto_ptr_type requirementName_;

      // resourceName
      public:
      ::XMLSchema::string<ACE_TCHAR> const& resourceName () const;
      void resourceName (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > resourceName_auto_ptr_type;
      resourceName_auto_ptr_type resourceName_;

      // property
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Property, ACE_Null_Mutex> property_value_type;
      typedef std::list<property_value_type> property_container_type;
      typedef property_container_type::iterator property_iterator;
      typedef property_container_type::const_iterator property_const_iterator;
      property_iterator begin_property ();
      property_iterator end_property ();
      property_const_iterator begin_property () const;
      property_const_iterator end_property () const;
      void add_property (property_value_type const&);
      size_t count_property () const;

      protected:
      property_container_type property_;

      public:
      InstanceResourceDeploymentDescription (::DAnCE::Config_Handlers::ResourceUsageKind const& resourceUsage__,
                                             ::XMLSchema::string<ACE_TCHAR> const& requirementName__,
                                             ::XMLSchema::string<ACE_TCHAR> const& resourceName__);

      explicit InstanceResourceDeploymentDescription (::XSCRT::XML::Element<ACE_TCHAR> const&);
      InstanceResourceDeploymentDescription (InstanceResourceDeploymentDescription const& s);
      InstanceResourceDeploymentDescription& operator= (InstanceResourceDeploymentDescription const& s);
    };


    class XSC_XML_Handlers_Export InstanceDeploymentDescription : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::InstanceDeploymentDescription, ACE_Null_Mutex> _ptr;

      // name
      public:
      ::XMLSchema::string<ACE_TCHAR> const& name () const;
      void name (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > name_auto_ptr_type;
      name_auto_ptr_type name_;

      // node
      public:
      ::XMLSchema::string<ACE_TCHAR> const& node () const;
      void node (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > node_auto_ptr_type;
      node_auto_ptr_type node_;

      // source
      public:
      ::XMLSchema::string<ACE_TCHAR> const& source () const;
      void source (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > source_auto_ptr_type;
      source_auto_ptr_type source_;

      // implementation
      public:
      ::DAnCE::Config_Handlers::IdRef const& implementation () const;
      void implementation (::DAnCE::Config_Handlers::IdRef const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::IdRef > implementation_auto_ptr_type;
      implementation_auto_ptr_type implementation_;

      // configProperty
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Property, ACE_Null_Mutex> configProperty_value_type;
      typedef std::list<configProperty_value_type> configProperty_container_type;
      typedef configProperty_container_type::iterator configProperty_iterator;
      typedef configProperty_container_type::const_iterator configProperty_const_iterator;
      configProperty_iterator begin_configProperty ();
      configProperty_iterator end_configProperty ();
      configProperty_const_iterator begin_configProperty () const;
      configProperty_const_iterator end_configProperty () const;
      void add_configProperty (configProperty_value_type const&);
      size_t count_configProperty () const;

      protected:
      configProperty_container_type configProperty_;

      // deployedResource
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::InstanceResourceDeploymentDescription, ACE_Null_Mutex> deployedResource_value_type;
      typedef std::list<deployedResource_value_type> deployedResource_container_type;
      typedef deployedResource_container_type::iterator deployedResource_iterator;
      typedef deployedResource_container_type::const_iterator deployedResource_const_iterator;
      deployedResource_iterator begin_deployedResource ();
      deployedResource_iterator end_deployedResource ();
      deployedResource_const_iterator begin_deployedResource () const;
      deployedResource_const_iterator end_deployedResource () const;
      void add_deployedResource (deployedResource_value_type const&);
      size_t count_deployedResource () const;

      protected:
      deployedResource_container_type deployedResource_;

      // deployedSharedResource
      public:
      bool deployedSharedResource_p () const;
      ::DAnCE::Config_Handlers::InstanceResourceDeploymentDescription const& deployedSharedResource () const;
      void deployedSharedResource (::DAnCE::Config_Handlers::InstanceResourceDeploymentDescription const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::InstanceResourceDeploymentDescription > deployedSharedResource_auto_ptr_type;
      deployedSharedResource_auto_ptr_type deployedSharedResource_;

      // id
      public:
      bool id_p () const;
      ::XMLSchema::ID<ACE_TCHAR> const& id () const;
      ::XMLSchema::ID<ACE_TCHAR>& id ();
      void id (::XMLSchema::ID<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::ID<ACE_TCHAR> > id_auto_ptr_type;
      id_auto_ptr_type id_;

      public:
      InstanceDeploymentDescription (::XMLSchema::string<ACE_TCHAR> const& name__,
                                     ::XMLSchema::string<ACE_TCHAR> const& node__,
                                     ::XMLSchema::string<ACE_TCHAR> const& source__,
                                     ::DAnCE::Config_Handlers::IdRef const& implementation__);

      explicit InstanceDeploymentDescription (::XSCRT::XML::Element<ACE_TCHAR> const&);
      InstanceDeploymentDescription (InstanceDeploymentDescription const& s);
      InstanceDeploymentDescription& operator= (InstanceDeploymentDescription const& s);
    };


    class XSC_XML_Handlers_Export CCMComponentPortKind : public ::XSCRT::Type
    {
      public:
      explicit CCMComponentPortKind (::XSCRT::XML::Element<ACE_TCHAR> const&);
      explicit CCMComponentPortKind (::XSCRT::XML::Attribute<ACE_TCHAR> const&);

      static CCMComponentPortKind const Facet;
      static CCMComponentPortKind const SimplexReceptacle;
      static CCMComponentPortKind const MultiplexReceptacle;
      static CCMComponentPortKind const EventEmitter;
      static CCMComponentPortKind const EventPublisher;
      static CCMComponentPortKind const EventConsumer;
      static CCMComponentPortKind const ExtendedPort;
      static CCMComponentPortKind const MirrorPort;

      enum Value
      {
        Facet_l, SimplexReceptacle_l, MultiplexReceptacle_l, EventEmitter_l, EventPublisher_l, EventConsumer_l, ExtendedPort_l, MirrorPort_l
      };


      Value
      integral () const;

      friend bool XSC_XML_Handlers_Export
      operator== (CCMComponentPortKind const& a, CCMComponentPortKind const& b);

      friend bool XSC_XML_Handlers_Export
      operator!= (CCMComponentPortKind const& a, CCMComponentPortKind const& b);

      private:
      CCMComponentPortKind (Value v);

      Value v_;
    };

    bool XSC_XML_Handlers_Export operator== (CCMComponentPortKind const &a, CCMComponentPortKind const &b);

    bool XSC_XML_Handlers_Export operator!= (CCMComponentPortKind const &a, CCMComponentPortKind const &b);


    class XSC_XML_Handlers_Export ComponentPortDescription : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::ComponentPortDescription, ACE_Null_Mutex> _ptr;

      // name
      public:
      ::XMLSchema::string<ACE_TCHAR> const& name () const;
      void name (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > name_auto_ptr_type;
      name_auto_ptr_type name_;

      // specificType
      public:
      bool specificType_p () const;
      ::XMLSchema::string<ACE_TCHAR> const& specificType () const;
      void specificType (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > specificType_auto_ptr_type;
      specificType_auto_ptr_type specificType_;

      // supportedType
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::XMLSchema::string<ACE_TCHAR>, ACE_Null_Mutex> supportedType_value_type;
      typedef std::list<supportedType_value_type> supportedType_container_type;
      typedef supportedType_container_type::iterator supportedType_iterator;
      typedef supportedType_container_type::const_iterator supportedType_const_iterator;
      supportedType_iterator begin_supportedType ();
      supportedType_iterator end_supportedType ();
      supportedType_const_iterator begin_supportedType () const;
      supportedType_const_iterator end_supportedType () const;
      void add_supportedType (supportedType_value_type const&);
      size_t count_supportedType () const;

      protected:
      supportedType_container_type supportedType_;

      // provider
      public:
      ::XMLSchema::boolean const& provider () const;
      void provider (::XMLSchema::boolean const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::boolean > provider_auto_ptr_type;
      provider_auto_ptr_type provider_;

      // exclusiveProvider
      public:
      ::XMLSchema::boolean const& exclusiveProvider () const;
      void exclusiveProvider (::XMLSchema::boolean const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::boolean > exclusiveProvider_auto_ptr_type;
      exclusiveProvider_auto_ptr_type exclusiveProvider_;

      // exclusiveUser
      public:
      ::XMLSchema::boolean const& exclusiveUser () const;
      void exclusiveUser (::XMLSchema::boolean const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::boolean > exclusiveUser_auto_ptr_type;
      exclusiveUser_auto_ptr_type exclusiveUser_;

      // optional
      public:
      ::XMLSchema::boolean const& optional () const;
      void optional (::XMLSchema::boolean const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::boolean > optional_auto_ptr_type;
      optional_auto_ptr_type optional_;

      // kind
      public:
      ::DAnCE::Config_Handlers::CCMComponentPortKind const& kind () const;
      void kind (::DAnCE::Config_Handlers::CCMComponentPortKind const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::CCMComponentPortKind > kind_auto_ptr_type;
      kind_auto_ptr_type kind_;

      // templateParam
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::XMLSchema::string<ACE_TCHAR>, ACE_Null_Mutex> templateParam_value_type;
      typedef std::list<templateParam_value_type> templateParam_container_type;
      typedef templateParam_container_type::iterator templateParam_iterator;
      typedef templateParam_container_type::const_iterator templateParam_const_iterator;
      templateParam_iterator begin_templateParam ();
      templateParam_iterator end_templateParam ();
      templateParam_const_iterator begin_templateParam () const;
      templateParam_const_iterator end_templateParam () const;
      void add_templateParam (templateParam_value_type const&);
      size_t count_templateParam () const;

      protected:
      templateParam_container_type templateParam_;

      public:
      ComponentPortDescription (::XMLSchema::string<ACE_TCHAR> const& name__,
                                ::XMLSchema::boolean const& provider__,
                                ::XMLSchema::boolean const& exclusiveProvider__,
                                ::XMLSchema::boolean const& exclusiveUser__,
                                ::XMLSchema::boolean const& optional__,
                                ::DAnCE::Config_Handlers::CCMComponentPortKind const& kind__);

      explicit ComponentPortDescription (::XSCRT::XML::Element<ACE_TCHAR> const&);
      ComponentPortDescription (ComponentPortDescription const& s);
      ComponentPortDescription& operator= (ComponentPortDescription const& s);
    };


    class XSC_XML_Handlers_Export ComponentPropertyDescription : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::ComponentPropertyDescription, ACE_Null_Mutex> _ptr;

      // name
      public:
      ::XMLSchema::string<ACE_TCHAR> const& name () const;
      void name (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > name_auto_ptr_type;
      name_auto_ptr_type name_;

      // type
      public:
      ::DAnCE::Config_Handlers::DataType const& type () const;
      void type (::DAnCE::Config_Handlers::DataType const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::DataType > type_auto_ptr_type;
      type_auto_ptr_type type_;

      public:
      ComponentPropertyDescription (::XMLSchema::string<ACE_TCHAR> const& name__,
                                    ::DAnCE::Config_Handlers::DataType const& type__);

      explicit ComponentPropertyDescription (::XSCRT::XML::Element<ACE_TCHAR> const&);
      ComponentPropertyDescription (ComponentPropertyDescription const& s);
      ComponentPropertyDescription& operator= (ComponentPropertyDescription const& s);
    };


    class XSC_XML_Handlers_Export ComponentExternalPortEndpoint : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::ComponentExternalPortEndpoint, ACE_Null_Mutex> _ptr;

      // portName
      public:
      ::XMLSchema::string<ACE_TCHAR> const& portName () const;
      void portName (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > portName_auto_ptr_type;
      portName_auto_ptr_type portName_;

      public:
      ComponentExternalPortEndpoint (::XMLSchema::string<ACE_TCHAR> const& portName__);

      explicit ComponentExternalPortEndpoint (::XSCRT::XML::Element<ACE_TCHAR> const&);
      ComponentExternalPortEndpoint (ComponentExternalPortEndpoint const& s);
      ComponentExternalPortEndpoint& operator= (ComponentExternalPortEndpoint const& s);
    };


    class XSC_XML_Handlers_Export PlanSubcomponentPortEndpoint : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::PlanSubcomponentPortEndpoint, ACE_Null_Mutex> _ptr;

      // portName
      public:
      ::XMLSchema::string<ACE_TCHAR> const& portName () const;
      void portName (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > portName_auto_ptr_type;
      portName_auto_ptr_type portName_;

      // provider
      public:
      bool provider_p () const;
      ::XMLSchema::string<ACE_TCHAR> const& provider () const;
      void provider (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > provider_auto_ptr_type;
      provider_auto_ptr_type provider_;

      // kind
      public:
      ::DAnCE::Config_Handlers::CCMComponentPortKind const& kind () const;
      void kind (::DAnCE::Config_Handlers::CCMComponentPortKind const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::CCMComponentPortKind > kind_auto_ptr_type;
      kind_auto_ptr_type kind_;

      // instance
      public:
      ::DAnCE::Config_Handlers::IdRef const& instance () const;
      void instance (::DAnCE::Config_Handlers::IdRef const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::IdRef > instance_auto_ptr_type;
      instance_auto_ptr_type instance_;

      public:
      PlanSubcomponentPortEndpoint (::XMLSchema::string<ACE_TCHAR> const& portName__,
                                    ::DAnCE::Config_Handlers::CCMComponentPortKind const& kind__,
                                    ::DAnCE::Config_Handlers::IdRef const& instance__);

      explicit PlanSubcomponentPortEndpoint (::XSCRT::XML::Element<ACE_TCHAR> const&);
      PlanSubcomponentPortEndpoint (PlanSubcomponentPortEndpoint const& s);
      PlanSubcomponentPortEndpoint& operator= (PlanSubcomponentPortEndpoint const& s);
    };


    class XSC_XML_Handlers_Export ExternalReferenceEndpoint : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::ExternalReferenceEndpoint, ACE_Null_Mutex> _ptr;

      // location
      public:
      ::XMLSchema::string<ACE_TCHAR> const& location () const;
      void location (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > location_auto_ptr_type;
      location_auto_ptr_type location_;

      // provider
      public:
      ::XMLSchema::boolean const& provider () const;
      void provider (::XMLSchema::boolean const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::boolean > provider_auto_ptr_type;
      provider_auto_ptr_type provider_;

      // portName
      public:
      bool portName_p () const;
      ::XMLSchema::string<ACE_TCHAR> const& portName () const;
      void portName (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > portName_auto_ptr_type;
      portName_auto_ptr_type portName_;

      // supportedType
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::XMLSchema::string<ACE_TCHAR>, ACE_Null_Mutex> supportedType_value_type;
      typedef std::list<supportedType_value_type> supportedType_container_type;
      typedef supportedType_container_type::iterator supportedType_iterator;
      typedef supportedType_container_type::const_iterator supportedType_const_iterator;
      supportedType_iterator begin_supportedType ();
      supportedType_iterator end_supportedType ();
      supportedType_const_iterator begin_supportedType () const;
      supportedType_const_iterator end_supportedType () const;
      void add_supportedType (supportedType_value_type const&);
      size_t count_supportedType () const;

      protected:
      supportedType_container_type supportedType_;

      public:
      ExternalReferenceEndpoint (::XMLSchema::string<ACE_TCHAR> const& location__,
                                 ::XMLSchema::boolean const& provider__);

      explicit ExternalReferenceEndpoint (::XSCRT::XML::Element<ACE_TCHAR> const&);
      ExternalReferenceEndpoint (ExternalReferenceEndpoint const& s);
      ExternalReferenceEndpoint& operator= (ExternalReferenceEndpoint const& s);
    };


    class XSC_XML_Handlers_Export ConnectionResourceDeploymentDescription : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::ConnectionResourceDeploymentDescription, ACE_Null_Mutex> _ptr;

      // targetName
      public:
      ::XMLSchema::string<ACE_TCHAR> const& targetName () const;
      void targetName (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > targetName_auto_ptr_type;
      targetName_auto_ptr_type targetName_;

      // requirementName
      public:
      ::XMLSchema::string<ACE_TCHAR> const& requirementName () const;
      void requirementName (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > requirementName_auto_ptr_type;
      requirementName_auto_ptr_type requirementName_;

      // resourceName
      public:
      ::XMLSchema::string<ACE_TCHAR> const& resourceName () const;
      void resourceName (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > resourceName_auto_ptr_type;
      resourceName_auto_ptr_type resourceName_;

      // property
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Property, ACE_Null_Mutex> property_value_type;
      typedef std::list<property_value_type> property_container_type;
      typedef property_container_type::iterator property_iterator;
      typedef property_container_type::const_iterator property_const_iterator;
      property_iterator begin_property ();
      property_iterator end_property ();
      property_const_iterator begin_property () const;
      property_const_iterator end_property () const;
      void add_property (property_value_type const&);
      size_t count_property () const;

      protected:
      property_container_type property_;

      public:
      ConnectionResourceDeploymentDescription (::XMLSchema::string<ACE_TCHAR> const& targetName__,
                                               ::XMLSchema::string<ACE_TCHAR> const& requirementName__,
                                               ::XMLSchema::string<ACE_TCHAR> const& resourceName__);

      explicit ConnectionResourceDeploymentDescription (::XSCRT::XML::Element<ACE_TCHAR> const&);
      ConnectionResourceDeploymentDescription (ConnectionResourceDeploymentDescription const& s);
      ConnectionResourceDeploymentDescription& operator= (ConnectionResourceDeploymentDescription const& s);
    };


    class XSC_XML_Handlers_Export PlanConnectionDescription : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::PlanConnectionDescription, ACE_Null_Mutex> _ptr;

      // name
      public:
      ::XMLSchema::string<ACE_TCHAR> const& name () const;
      void name (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > name_auto_ptr_type;
      name_auto_ptr_type name_;

      // source
      public:
      bool source_p () const;
      ::XMLSchema::string<ACE_TCHAR> const& source () const;
      void source (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > source_auto_ptr_type;
      source_auto_ptr_type source_;

      // deployRequirement
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Requirement, ACE_Null_Mutex> deployRequirement_value_type;
      typedef std::list<deployRequirement_value_type> deployRequirement_container_type;
      typedef deployRequirement_container_type::iterator deployRequirement_iterator;
      typedef deployRequirement_container_type::const_iterator deployRequirement_const_iterator;
      deployRequirement_iterator begin_deployRequirement ();
      deployRequirement_iterator end_deployRequirement ();
      deployRequirement_const_iterator begin_deployRequirement () const;
      deployRequirement_const_iterator end_deployRequirement () const;
      void add_deployRequirement (deployRequirement_value_type const&);
      size_t count_deployRequirement () const;

      protected:
      deployRequirement_container_type deployRequirement_;

      // externalEndpoint
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::ComponentExternalPortEndpoint, ACE_Null_Mutex> externalEndpoint_value_type;
      typedef std::list<externalEndpoint_value_type> externalEndpoint_container_type;
      typedef externalEndpoint_container_type::iterator externalEndpoint_iterator;
      typedef externalEndpoint_container_type::const_iterator externalEndpoint_const_iterator;
      externalEndpoint_iterator begin_externalEndpoint ();
      externalEndpoint_iterator end_externalEndpoint ();
      externalEndpoint_const_iterator begin_externalEndpoint () const;
      externalEndpoint_const_iterator end_externalEndpoint () const;
      void add_externalEndpoint (externalEndpoint_value_type const&);
      size_t count_externalEndpoint () const;

      protected:
      externalEndpoint_container_type externalEndpoint_;

      // internalEndpoint
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::PlanSubcomponentPortEndpoint, ACE_Null_Mutex> internalEndpoint_value_type;
      typedef std::list<internalEndpoint_value_type> internalEndpoint_container_type;
      typedef internalEndpoint_container_type::iterator internalEndpoint_iterator;
      typedef internalEndpoint_container_type::const_iterator internalEndpoint_const_iterator;
      internalEndpoint_iterator begin_internalEndpoint ();
      internalEndpoint_iterator end_internalEndpoint ();
      internalEndpoint_const_iterator begin_internalEndpoint () const;
      internalEndpoint_const_iterator end_internalEndpoint () const;
      void add_internalEndpoint (internalEndpoint_value_type const&);
      size_t count_internalEndpoint () const;

      protected:
      internalEndpoint_container_type internalEndpoint_;

      // externalReference
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::ExternalReferenceEndpoint, ACE_Null_Mutex> externalReference_value_type;
      typedef std::list<externalReference_value_type> externalReference_container_type;
      typedef externalReference_container_type::iterator externalReference_iterator;
      typedef externalReference_container_type::const_iterator externalReference_const_iterator;
      externalReference_iterator begin_externalReference ();
      externalReference_iterator end_externalReference ();
      externalReference_const_iterator begin_externalReference () const;
      externalReference_const_iterator end_externalReference () const;
      void add_externalReference (externalReference_value_type const&);
      size_t count_externalReference () const;

      protected:
      externalReference_container_type externalReference_;

      // deployedResource
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::ConnectionResourceDeploymentDescription, ACE_Null_Mutex> deployedResource_value_type;
      typedef std::list<deployedResource_value_type> deployedResource_container_type;
      typedef deployedResource_container_type::iterator deployedResource_iterator;
      typedef deployedResource_container_type::const_iterator deployedResource_const_iterator;
      deployedResource_iterator begin_deployedResource ();
      deployedResource_iterator end_deployedResource ();
      deployedResource_const_iterator begin_deployedResource () const;
      deployedResource_const_iterator end_deployedResource () const;
      void add_deployedResource (deployedResource_value_type const&);
      size_t count_deployedResource () const;

      protected:
      deployedResource_container_type deployedResource_;

      public:
      PlanConnectionDescription (::XMLSchema::string<ACE_TCHAR> const& name__);

      explicit PlanConnectionDescription (::XSCRT::XML::Element<ACE_TCHAR> const&);
      PlanConnectionDescription (PlanConnectionDescription const& s);
      PlanConnectionDescription& operator= (PlanConnectionDescription const& s);
    };


    class XSC_XML_Handlers_Export ImplementationDependency : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::ImplementationDependency, ACE_Null_Mutex> _ptr;

      // requiredType
      public:
      ::XMLSchema::string<ACE_TCHAR> const& requiredType () const;
      void requiredType (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > requiredType_auto_ptr_type;
      requiredType_auto_ptr_type requiredType_;

      public:
      ImplementationDependency (::XMLSchema::string<ACE_TCHAR> const& requiredType__);

      explicit ImplementationDependency (::XSCRT::XML::Element<ACE_TCHAR> const&);
      ImplementationDependency (ImplementationDependency const& s);
      ImplementationDependency& operator= (ImplementationDependency const& s);
    };


    class XSC_XML_Handlers_Export Capability : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Capability, ACE_Null_Mutex> _ptr;

      // name
      public:
      ::XMLSchema::string<ACE_TCHAR> const& name () const;
      void name (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > name_auto_ptr_type;
      name_auto_ptr_type name_;

      // resourceType
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::XMLSchema::string<ACE_TCHAR>, ACE_Null_Mutex> resourceType_value_type;
      typedef std::list<resourceType_value_type> resourceType_container_type;
      typedef resourceType_container_type::iterator resourceType_iterator;
      typedef resourceType_container_type::const_iterator resourceType_const_iterator;
      resourceType_iterator begin_resourceType ();
      resourceType_iterator end_resourceType ();
      resourceType_const_iterator begin_resourceType () const;
      resourceType_const_iterator end_resourceType () const;
      void add_resourceType (resourceType_value_type const&);
      size_t count_resourceType () const;

      protected:
      resourceType_container_type resourceType_;

      // property
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::SatisfierProperty, ACE_Null_Mutex> property_value_type;
      typedef std::list<property_value_type> property_container_type;
      typedef property_container_type::iterator property_iterator;
      typedef property_container_type::const_iterator property_const_iterator;
      property_iterator begin_property ();
      property_iterator end_property ();
      property_const_iterator begin_property () const;
      property_const_iterator end_property () const;
      void add_property (property_value_type const&);
      size_t count_property () const;

      protected:
      property_container_type property_;

      public:
      Capability (::XMLSchema::string<ACE_TCHAR> const& name__);

      explicit Capability (::XSCRT::XML::Element<ACE_TCHAR> const&);
      Capability (Capability const& s);
      Capability& operator= (Capability const& s);
    };


    class XSC_XML_Handlers_Export ImplementationRequirement : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::ImplementationRequirement, ACE_Null_Mutex> _ptr;

      // resourceUsage
      public:
      bool resourceUsage_p () const;
      ::DAnCE::Config_Handlers::ResourceUsageKind const& resourceUsage () const;
      void resourceUsage (::DAnCE::Config_Handlers::ResourceUsageKind const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::ResourceUsageKind > resourceUsage_auto_ptr_type;
      resourceUsage_auto_ptr_type resourceUsage_;

      // resourcePort
      public:
      bool resourcePort_p () const;
      ::XMLSchema::string<ACE_TCHAR> const& resourcePort () const;
      void resourcePort (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > resourcePort_auto_ptr_type;
      resourcePort_auto_ptr_type resourcePort_;

      // componentPort
      public:
      bool componentPort_p () const;
      ::XMLSchema::string<ACE_TCHAR> const& componentPort () const;
      void componentPort (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > componentPort_auto_ptr_type;
      componentPort_auto_ptr_type componentPort_;

      // resourceType
      public:
      ::XMLSchema::string<ACE_TCHAR> const& resourceType () const;
      void resourceType (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > resourceType_auto_ptr_type;
      resourceType_auto_ptr_type resourceType_;

      // name
      public:
      ::XMLSchema::string<ACE_TCHAR> const& name () const;
      void name (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > name_auto_ptr_type;
      name_auto_ptr_type name_;

      // property
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Property, ACE_Null_Mutex> property_value_type;
      typedef std::list<property_value_type> property_container_type;
      typedef property_container_type::iterator property_iterator;
      typedef property_container_type::const_iterator property_const_iterator;
      property_iterator begin_property ();
      property_iterator end_property ();
      property_const_iterator begin_property () const;
      property_const_iterator end_property () const;
      void add_property (property_value_type const&);
      size_t count_property () const;

      protected:
      property_container_type property_;

      public:
      ImplementationRequirement (::XMLSchema::string<ACE_TCHAR> const& resourceType__,
                                 ::XMLSchema::string<ACE_TCHAR> const& name__);

      explicit ImplementationRequirement (::XSCRT::XML::Element<ACE_TCHAR> const&);
      ImplementationRequirement (ImplementationRequirement const& s);
      ImplementationRequirement& operator= (ImplementationRequirement const& s);
    };


    class XSC_XML_Handlers_Export SubcomponentPortEndpoint : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::SubcomponentPortEndpoint, ACE_Null_Mutex> _ptr;

      // portName
      public:
      ::XMLSchema::string<ACE_TCHAR> const& portName () const;
      void portName (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > portName_auto_ptr_type;
      portName_auto_ptr_type portName_;

      // instance
      public:
      ::DAnCE::Config_Handlers::IdRef const& instance () const;
      void instance (::DAnCE::Config_Handlers::IdRef const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::IdRef > instance_auto_ptr_type;
      instance_auto_ptr_type instance_;

      public:
      SubcomponentPortEndpoint (::XMLSchema::string<ACE_TCHAR> const& portName__,
                                ::DAnCE::Config_Handlers::IdRef const& instance__);

      explicit SubcomponentPortEndpoint (::XSCRT::XML::Element<ACE_TCHAR> const&);
      SubcomponentPortEndpoint (SubcomponentPortEndpoint const& s);
      SubcomponentPortEndpoint& operator= (SubcomponentPortEndpoint const& s);
    };


    class XSC_XML_Handlers_Export AssemblyConnectionDescription : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::AssemblyConnectionDescription, ACE_Null_Mutex> _ptr;

      // name
      public:
      ::XMLSchema::string<ACE_TCHAR> const& name () const;
      void name (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > name_auto_ptr_type;
      name_auto_ptr_type name_;

      // deployRequirement
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Requirement, ACE_Null_Mutex> deployRequirement_value_type;
      typedef std::list<deployRequirement_value_type> deployRequirement_container_type;
      typedef deployRequirement_container_type::iterator deployRequirement_iterator;
      typedef deployRequirement_container_type::const_iterator deployRequirement_const_iterator;
      deployRequirement_iterator begin_deployRequirement ();
      deployRequirement_iterator end_deployRequirement ();
      deployRequirement_const_iterator begin_deployRequirement () const;
      deployRequirement_const_iterator end_deployRequirement () const;
      void add_deployRequirement (deployRequirement_value_type const&);
      size_t count_deployRequirement () const;

      protected:
      deployRequirement_container_type deployRequirement_;

      // internalEndpoint
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::SubcomponentPortEndpoint, ACE_Null_Mutex> internalEndpoint_value_type;
      typedef std::list<internalEndpoint_value_type> internalEndpoint_container_type;
      typedef internalEndpoint_container_type::iterator internalEndpoint_iterator;
      typedef internalEndpoint_container_type::const_iterator internalEndpoint_const_iterator;
      internalEndpoint_iterator begin_internalEndpoint ();
      internalEndpoint_iterator end_internalEndpoint ();
      internalEndpoint_const_iterator begin_internalEndpoint () const;
      internalEndpoint_const_iterator end_internalEndpoint () const;
      void add_internalEndpoint (internalEndpoint_value_type const&);
      size_t count_internalEndpoint () const;

      protected:
      internalEndpoint_container_type internalEndpoint_;

      // externalEndpoint
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::ComponentExternalPortEndpoint, ACE_Null_Mutex> externalEndpoint_value_type;
      typedef std::list<externalEndpoint_value_type> externalEndpoint_container_type;
      typedef externalEndpoint_container_type::iterator externalEndpoint_iterator;
      typedef externalEndpoint_container_type::const_iterator externalEndpoint_const_iterator;
      externalEndpoint_iterator begin_externalEndpoint ();
      externalEndpoint_iterator end_externalEndpoint ();
      externalEndpoint_const_iterator begin_externalEndpoint () const;
      externalEndpoint_const_iterator end_externalEndpoint () const;
      void add_externalEndpoint (externalEndpoint_value_type const&);
      size_t count_externalEndpoint () const;

      protected:
      externalEndpoint_container_type externalEndpoint_;

      // externalReference
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::ExternalReferenceEndpoint, ACE_Null_Mutex> externalReference_value_type;
      typedef std::list<externalReference_value_type> externalReference_container_type;
      typedef externalReference_container_type::iterator externalReference_iterator;
      typedef externalReference_container_type::const_iterator externalReference_const_iterator;
      externalReference_iterator begin_externalReference ();
      externalReference_iterator end_externalReference ();
      externalReference_const_iterator begin_externalReference () const;
      externalReference_const_iterator end_externalReference () const;
      void add_externalReference (externalReference_value_type const&);
      size_t count_externalReference () const;

      protected:
      externalReference_container_type externalReference_;

      public:
      AssemblyConnectionDescription (::XMLSchema::string<ACE_TCHAR> const& name__);

      explicit AssemblyConnectionDescription (::XSCRT::XML::Element<ACE_TCHAR> const&);
      AssemblyConnectionDescription (AssemblyConnectionDescription const& s);
      AssemblyConnectionDescription& operator= (AssemblyConnectionDescription const& s);
    };


    class XSC_XML_Handlers_Export PlanLocalityKind : public ::XSCRT::Type
    {
      public:
      explicit PlanLocalityKind (::XSCRT::XML::Element<ACE_TCHAR> const&);
      explicit PlanLocalityKind (::XSCRT::XML::Attribute<ACE_TCHAR> const&);

      static PlanLocalityKind const SameProcess;
      static PlanLocalityKind const DifferentProcess;
      static PlanLocalityKind const NoConstraint;

      enum Value
      {
        SameProcess_l, DifferentProcess_l, NoConstraint_l
      };


      Value
      integral () const;

      friend bool XSC_XML_Handlers_Export
      operator== (PlanLocalityKind const& a, PlanLocalityKind const& b);

      friend bool XSC_XML_Handlers_Export
      operator!= (PlanLocalityKind const& a, PlanLocalityKind const& b);

      private:
      PlanLocalityKind (Value v);

      Value v_;
    };

    bool XSC_XML_Handlers_Export operator== (PlanLocalityKind const &a, PlanLocalityKind const &b);

    bool XSC_XML_Handlers_Export operator!= (PlanLocalityKind const &a, PlanLocalityKind const &b);


    class XSC_XML_Handlers_Export PlanLocality : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::PlanLocality, ACE_Null_Mutex> _ptr;

      // constraint
      public:
      ::DAnCE::Config_Handlers::PlanLocalityKind const& constraint () const;
      void constraint (::DAnCE::Config_Handlers::PlanLocalityKind const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::PlanLocalityKind > constraint_auto_ptr_type;
      constraint_auto_ptr_type constraint_;

      // constrainedInstance
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::IdRef, ACE_Null_Mutex> constrainedInstance_value_type;
      typedef std::list<constrainedInstance_value_type> constrainedInstance_container_type;
      typedef constrainedInstance_container_type::iterator constrainedInstance_iterator;
      typedef constrainedInstance_container_type::const_iterator constrainedInstance_const_iterator;
      constrainedInstance_iterator begin_constrainedInstance ();
      constrainedInstance_iterator end_constrainedInstance ();
      constrainedInstance_const_iterator begin_constrainedInstance () const;
      constrainedInstance_const_iterator end_constrainedInstance () const;
      void add_constrainedInstance (constrainedInstance_value_type const&);
      size_t count_constrainedInstance () const;

      protected:
      constrainedInstance_container_type constrainedInstance_;

      public:
      PlanLocality (::DAnCE::Config_Handlers::PlanLocalityKind const& constraint__,
                    constrainedInstance_container_type const& constrainedInstance__);

      explicit PlanLocality (::XSCRT::XML::Element<ACE_TCHAR> const&);
      PlanLocality (PlanLocality const& s);
      PlanLocality& operator= (PlanLocality const& s);
    };
  }
}

namespace DAnCE
{
  namespace Config_Handlers
  {
  }
}

#endif // BASIC_DEPLOYMENT_DATA_HPP
