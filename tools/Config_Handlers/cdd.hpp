/*
 * This code was generated by the XML Schema Compiler.
 *
 * Changes made to this code will most likely be overwritten
 * when the handlers are recompiled.
 *
 * If you find errors or feel that there are bugfixes to be made,
 * please report this to the XSC project at
 * https://github.com/DOCGroup/XSC
 */
#ifndef CDD_HPP
#define CDD_HPP

#include "XSC_XML_Handlers_Export.h"
// Forward declarations.
namespace DAnCE
{
  namespace Config_Handlers
  {
    class Domain;
    class Bridge;
    class Interconnect;
    class Node;
    class SharedResource;
  }
}

#include <memory>
#include <string>
#include <list>
#include "ace/XML_Utils/XMLSchema/Types.hpp"
#include "ace/XML_Utils/XMLSchema/id_map.hpp"
#include "ace/Refcounted_Auto_Ptr.h"
#include "ace/Null_Mutex.h"
#include "ace/ace_wchar.h"

#include "Basic_Deployment_Data.hpp"

namespace DAnCE
{
  namespace Config_Handlers
  {
    class XSC_XML_Handlers_Export Domain : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Domain, ACE_Null_Mutex> _ptr;

      // UUID
      public:
      bool UUID_p () const;
      ::XMLSchema::string<ACE_TCHAR> const& UUID () const;
      void UUID (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > UUID_auto_ptr_type;
      UUID_auto_ptr_type UUID_;

      // label
      public:
      bool label_p () const;
      ::XMLSchema::string<ACE_TCHAR> const& label () const;
      void label (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > label_auto_ptr_type;
      label_auto_ptr_type label_;

      // node
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Node, ACE_Null_Mutex> node_value_type;
      typedef std::list<node_value_type> node_container_type;
      typedef node_container_type::iterator node_iterator;
      typedef node_container_type::const_iterator node_const_iterator;
      node_iterator begin_node ();
      node_iterator end_node ();
      node_const_iterator begin_node () const;
      node_const_iterator end_node () const;
      void add_node (node_value_type const&);
      size_t count_node () const;

      protected:
      node_container_type node_;

      // interconnect
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Interconnect, ACE_Null_Mutex> interconnect_value_type;
      typedef std::list<interconnect_value_type> interconnect_container_type;
      typedef interconnect_container_type::iterator interconnect_iterator;
      typedef interconnect_container_type::const_iterator interconnect_const_iterator;
      interconnect_iterator begin_interconnect ();
      interconnect_iterator end_interconnect ();
      interconnect_const_iterator begin_interconnect () const;
      interconnect_const_iterator end_interconnect () const;
      void add_interconnect (interconnect_value_type const&);
      size_t count_interconnect () const;

      protected:
      interconnect_container_type interconnect_;

      // bridge
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Bridge, ACE_Null_Mutex> bridge_value_type;
      typedef std::list<bridge_value_type> bridge_container_type;
      typedef bridge_container_type::iterator bridge_iterator;
      typedef bridge_container_type::const_iterator bridge_const_iterator;
      bridge_iterator begin_bridge ();
      bridge_iterator end_bridge ();
      bridge_const_iterator begin_bridge () const;
      bridge_const_iterator end_bridge () const;
      void add_bridge (bridge_value_type const&);
      size_t count_bridge () const;

      protected:
      bridge_container_type bridge_;

      // sharedResource
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::SharedResource, ACE_Null_Mutex> sharedResource_value_type;
      typedef std::list<sharedResource_value_type> sharedResource_container_type;
      typedef sharedResource_container_type::iterator sharedResource_iterator;
      typedef sharedResource_container_type::const_iterator sharedResource_const_iterator;
      sharedResource_iterator begin_sharedResource ();
      sharedResource_iterator end_sharedResource ();
      sharedResource_const_iterator begin_sharedResource () const;
      sharedResource_const_iterator end_sharedResource () const;
      void add_sharedResource (sharedResource_value_type const&);
      size_t count_sharedResource () const;

      protected:
      sharedResource_container_type sharedResource_;

      // infoProperty
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Property, ACE_Null_Mutex> infoProperty_value_type;
      typedef std::list<infoProperty_value_type> infoProperty_container_type;
      typedef infoProperty_container_type::iterator infoProperty_iterator;
      typedef infoProperty_container_type::const_iterator infoProperty_const_iterator;
      infoProperty_iterator begin_infoProperty ();
      infoProperty_iterator end_infoProperty ();
      infoProperty_const_iterator begin_infoProperty () const;
      infoProperty_const_iterator end_infoProperty () const;
      void add_infoProperty (infoProperty_value_type const&);
      size_t count_infoProperty () const;

      protected:
      infoProperty_container_type infoProperty_;

      public:
      Domain (node_container_type const& node__);

      explicit Domain (::XSCRT::XML::Element<ACE_TCHAR> const&);
      Domain (Domain const& s);
      Domain& operator= (Domain const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export Bridge : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Bridge, ACE_Null_Mutex> _ptr;

      // name
      public:
      ::XMLSchema::string<ACE_TCHAR> const& name () const;
      void name (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > name_auto_ptr_type;
      name_auto_ptr_type name_;

      // label
      public:
      bool label_p () const;
      ::XMLSchema::string<ACE_TCHAR> const& label () const;
      void label (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > label_auto_ptr_type;
      label_auto_ptr_type label_;

      // connect
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Interconnect, ACE_Null_Mutex> connect_value_type;
      typedef std::list<connect_value_type> connect_container_type;
      typedef connect_container_type::iterator connect_iterator;
      typedef connect_container_type::const_iterator connect_const_iterator;
      connect_iterator begin_connect ();
      connect_iterator end_connect ();
      connect_const_iterator begin_connect () const;
      connect_const_iterator end_connect () const;
      void add_connect (connect_value_type const&);
      size_t count_connect () const;

      protected:
      connect_container_type connect_;

      // resource
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Resource, ACE_Null_Mutex> resource_value_type;
      typedef std::list<resource_value_type> resource_container_type;
      typedef resource_container_type::iterator resource_iterator;
      typedef resource_container_type::const_iterator resource_const_iterator;
      resource_iterator begin_resource ();
      resource_iterator end_resource ();
      resource_const_iterator begin_resource () const;
      resource_const_iterator end_resource () const;
      void add_resource (resource_value_type const&);
      size_t count_resource () const;

      protected:
      resource_container_type resource_;

      public:
      Bridge (::XMLSchema::string<ACE_TCHAR> const& name__,
              connect_container_type const& connect__);

      explicit Bridge (::XSCRT::XML::Element<ACE_TCHAR> const&);
      Bridge (Bridge const& s);
      Bridge& operator= (Bridge const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export Interconnect : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Interconnect, ACE_Null_Mutex> _ptr;

      // name
      public:
      ::XMLSchema::string<ACE_TCHAR> const& name () const;
      void name (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > name_auto_ptr_type;
      name_auto_ptr_type name_;

      // label
      public:
      bool label_p () const;
      ::XMLSchema::string<ACE_TCHAR> const& label () const;
      void label (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > label_auto_ptr_type;
      label_auto_ptr_type label_;

      // connection
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Bridge, ACE_Null_Mutex> connection_value_type;
      typedef std::list<connection_value_type> connection_container_type;
      typedef connection_container_type::iterator connection_iterator;
      typedef connection_container_type::const_iterator connection_const_iterator;
      connection_iterator begin_connection ();
      connection_iterator end_connection ();
      connection_const_iterator begin_connection () const;
      connection_const_iterator end_connection () const;
      void add_connection (connection_value_type const&);
      size_t count_connection () const;

      protected:
      connection_container_type connection_;

      // connect
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Node, ACE_Null_Mutex> connect_value_type;
      typedef std::list<connect_value_type> connect_container_type;
      typedef connect_container_type::iterator connect_iterator;
      typedef connect_container_type::const_iterator connect_const_iterator;
      connect_iterator begin_connect ();
      connect_iterator end_connect ();
      connect_const_iterator begin_connect () const;
      connect_const_iterator end_connect () const;
      void add_connect (connect_value_type const&);
      size_t count_connect () const;

      protected:
      connect_container_type connect_;

      // resource
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Resource, ACE_Null_Mutex> resource_value_type;
      typedef std::list<resource_value_type> resource_container_type;
      typedef resource_container_type::iterator resource_iterator;
      typedef resource_container_type::const_iterator resource_const_iterator;
      resource_iterator begin_resource ();
      resource_iterator end_resource ();
      resource_const_iterator begin_resource () const;
      resource_const_iterator end_resource () const;
      void add_resource (resource_value_type const&);
      size_t count_resource () const;

      protected:
      resource_container_type resource_;

      public:
      Interconnect (::XMLSchema::string<ACE_TCHAR> const& name__,
                    connect_container_type const& connect__);

      explicit Interconnect (::XSCRT::XML::Element<ACE_TCHAR> const&);
      Interconnect (Interconnect const& s);
      Interconnect& operator= (Interconnect const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export Node : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Node, ACE_Null_Mutex> _ptr;

      // name
      public:
      ::XMLSchema::string<ACE_TCHAR> const& name () const;
      void name (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > name_auto_ptr_type;
      name_auto_ptr_type name_;

      // label
      public:
      bool label_p () const;
      ::XMLSchema::string<ACE_TCHAR> const& label () const;
      void label (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > label_auto_ptr_type;
      label_auto_ptr_type label_;

      // connection
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Interconnect, ACE_Null_Mutex> connection_value_type;
      typedef std::list<connection_value_type> connection_container_type;
      typedef connection_container_type::iterator connection_iterator;
      typedef connection_container_type::const_iterator connection_const_iterator;
      connection_iterator begin_connection ();
      connection_iterator end_connection ();
      connection_const_iterator begin_connection () const;
      connection_const_iterator end_connection () const;
      void add_connection (connection_value_type const&);
      size_t count_connection () const;

      protected:
      connection_container_type connection_;

      // sharedResource
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::SharedResource, ACE_Null_Mutex> sharedResource_value_type;
      typedef std::list<sharedResource_value_type> sharedResource_container_type;
      typedef sharedResource_container_type::iterator sharedResource_iterator;
      typedef sharedResource_container_type::const_iterator sharedResource_const_iterator;
      sharedResource_iterator begin_sharedResource ();
      sharedResource_iterator end_sharedResource ();
      sharedResource_const_iterator begin_sharedResource () const;
      sharedResource_const_iterator end_sharedResource () const;
      void add_sharedResource (sharedResource_value_type const&);
      size_t count_sharedResource () const;

      protected:
      sharedResource_container_type sharedResource_;

      // resource
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Resource, ACE_Null_Mutex> resource_value_type;
      typedef std::list<resource_value_type> resource_container_type;
      typedef resource_container_type::iterator resource_iterator;
      typedef resource_container_type::const_iterator resource_const_iterator;
      resource_iterator begin_resource ();
      resource_iterator end_resource ();
      resource_const_iterator begin_resource () const;
      resource_const_iterator end_resource () const;
      void add_resource (resource_value_type const&);
      size_t count_resource () const;

      protected:
      resource_container_type resource_;

      public:
      Node (::XMLSchema::string<ACE_TCHAR> const& name__);

      explicit Node (::XSCRT::XML::Element<ACE_TCHAR> const&);
      Node (Node const& s);
      Node& operator= (Node const& s);

      private:
      char regulator__;
    };


    class XSC_XML_Handlers_Export SharedResource : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::SharedResource, ACE_Null_Mutex> _ptr;

      // name
      public:
      ::XMLSchema::string<ACE_TCHAR> const& name () const;
      void name (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > name_auto_ptr_type;
      name_auto_ptr_type name_;

      // resourceType
      public:
      ::XMLSchema::string<ACE_TCHAR> const& resourceType () const;
      void resourceType (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > resourceType_auto_ptr_type;
      resourceType_auto_ptr_type resourceType_;

      // node
      public:
      ::DAnCE::Config_Handlers::Node const& node () const;
      void node (::DAnCE::Config_Handlers::Node const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::Node > node_auto_ptr_type;
      node_auto_ptr_type node_;

      // property
      public:
      ::DAnCE::Config_Handlers::SatisfierProperty const& property () const;
      void property (::DAnCE::Config_Handlers::SatisfierProperty const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::SatisfierProperty > property_auto_ptr_type;
      property_auto_ptr_type property_;

      public:
      SharedResource (::XMLSchema::string<ACE_TCHAR> const& name__,
                      ::XMLSchema::string<ACE_TCHAR> const& resourceType__,
                      ::DAnCE::Config_Handlers::Node const& node__,
                      ::DAnCE::Config_Handlers::SatisfierProperty const& property__);

      explicit SharedResource (::XSCRT::XML::Element<ACE_TCHAR> const&);
      SharedResource (SharedResource const& s);
      SharedResource& operator= (SharedResource const& s);

      private:
      char regulator__;
    };
  }
}

namespace DAnCE
{
  namespace Config_Handlers
  {
  }
}

#endif // CDD_HPP
