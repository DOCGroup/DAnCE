/*
 * This code was generated by the XML Schema Compiler.
 *
 * Changes made to this code will most likely be overwritten
 * when the handlers are recompiled.
 *
 * If you find errors or feel that there are bugfixes to be made,
 * please report this to the XSC project at
 * https://github.com/DOCGroup/XSC
 */
#ifndef PCD_HPP
#define PCD_HPP

#include "XSC_XML_Handlers_Export.h"
// Forward declarations.
namespace DAnCE
{
  namespace Config_Handlers
  {
    class ComponentPackageImport;
    class PackageConfiguration;
  }
}

#include <memory>
#include <string>
#include <list>
#include "ace/XML_Utils/XMLSchema/Types.hpp"
#include "ace/XML_Utils/XMLSchema/id_map.hpp"
#include "ace/Refcounted_Auto_Ptr.h"
#include "ace/Null_Mutex.h"
#include "ace/ace_wchar.h"

#include "Basic_Deployment_Data.hpp"

#include "cpd.hpp"

namespace DAnCE
{
  namespace Config_Handlers
  {
    class XSC_XML_Handlers_Export ComponentPackageImport : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::ComponentPackageImport, ACE_Null_Mutex> _ptr;

      // location
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::XMLSchema::string<ACE_TCHAR>, ACE_Null_Mutex> location_value_type;
      typedef std::list<location_value_type> location_container_type;
      typedef location_container_type::iterator location_iterator;
      typedef location_container_type::const_iterator location_const_iterator;
      location_iterator begin_location ();
      location_iterator end_location ();
      location_const_iterator begin_location () const;
      location_const_iterator end_location () const;
      void add_location (location_value_type const&);
      size_t count_location () const;

      protected:
      location_container_type location_;

      public:
      ComponentPackageImport ();

      explicit ComponentPackageImport (::XSCRT::XML::Element<ACE_TCHAR> const&);
      ComponentPackageImport (ComponentPackageImport const& s);
      ComponentPackageImport& operator= (ComponentPackageImport const& s);
    };


    class XSC_XML_Handlers_Export PackageConfiguration : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::PackageConfiguration, ACE_Null_Mutex> _ptr;

      // label
      public:
      bool label_p () const;
      ::XMLSchema::string<ACE_TCHAR> const& label () const;
      void label (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > label_auto_ptr_type;
      label_auto_ptr_type label_;

      // UUID
      public:
      bool UUID_p () const;
      ::XMLSchema::string<ACE_TCHAR> const& UUID () const;
      void UUID (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > UUID_auto_ptr_type;
      UUID_auto_ptr_type UUID_;

      // basePackage
      public:
      bool basePackage_p () const;
      ::DAnCE::Config_Handlers::ComponentPackageDescription const& basePackage () const;
      void basePackage (::DAnCE::Config_Handlers::ComponentPackageDescription const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::ComponentPackageDescription > basePackage_auto_ptr_type;
      basePackage_auto_ptr_type basePackage_;

      // specializedConfig
      public:
      bool specializedConfig_p () const;
      ::DAnCE::Config_Handlers::PackageConfiguration const& specializedConfig () const;
      void specializedConfig (::DAnCE::Config_Handlers::PackageConfiguration const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::PackageConfiguration > specializedConfig_auto_ptr_type;
      specializedConfig_auto_ptr_type specializedConfig_;

      // importedPackage
      public:
      bool importedPackage_p () const;
      ::DAnCE::Config_Handlers::ComponentPackageImport const& importedPackage () const;
      void importedPackage (::DAnCE::Config_Handlers::ComponentPackageImport const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::ComponentPackageImport > importedPackage_auto_ptr_type;
      importedPackage_auto_ptr_type importedPackage_;

      // referencedPackage
      public:
      bool referencedPackage_p () const;
      ::DAnCE::Config_Handlers::ComponentPackageReference const& referencedPackage () const;
      void referencedPackage (::DAnCE::Config_Handlers::ComponentPackageReference const& );

      protected:
      typedef std::auto_ptr< ::DAnCE::Config_Handlers::ComponentPackageReference > referencedPackage_auto_ptr_type;
      referencedPackage_auto_ptr_type referencedPackage_;

      // selectRequirement
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Requirement, ACE_Null_Mutex> selectRequirement_value_type;
      typedef std::list<selectRequirement_value_type> selectRequirement_container_type;
      typedef selectRequirement_container_type::iterator selectRequirement_iterator;
      typedef selectRequirement_container_type::const_iterator selectRequirement_const_iterator;
      selectRequirement_iterator begin_selectRequirement ();
      selectRequirement_iterator end_selectRequirement ();
      selectRequirement_const_iterator begin_selectRequirement () const;
      selectRequirement_const_iterator end_selectRequirement () const;
      void add_selectRequirement (selectRequirement_value_type const&);
      size_t count_selectRequirement () const;

      protected:
      selectRequirement_container_type selectRequirement_;

      // configProperty
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::Property, ACE_Null_Mutex> configProperty_value_type;
      typedef std::list<configProperty_value_type> configProperty_container_type;
      typedef configProperty_container_type::iterator configProperty_iterator;
      typedef configProperty_container_type::const_iterator configProperty_const_iterator;
      configProperty_iterator begin_configProperty ();
      configProperty_iterator end_configProperty ();
      configProperty_const_iterator begin_configProperty () const;
      configProperty_const_iterator end_configProperty () const;
      void add_configProperty (configProperty_value_type const&);
      size_t count_configProperty () const;

      protected:
      configProperty_container_type configProperty_;

      // contentLocation
      public:
      bool contentLocation_p () const;
      ::XMLSchema::string<ACE_TCHAR> const& contentLocation () const;
      void contentLocation (::XMLSchema::string<ACE_TCHAR> const& );

      protected:
      typedef std::auto_ptr< ::XMLSchema::string<ACE_TCHAR> > contentLocation_auto_ptr_type;
      contentLocation_auto_ptr_type contentLocation_;

      public:
      PackageConfiguration ();

      explicit PackageConfiguration (::XSCRT::XML::Element<ACE_TCHAR> const&);
      PackageConfiguration (PackageConfiguration const& s);
      PackageConfiguration& operator= (PackageConfiguration const& s);
    };
  }
}

namespace DAnCE
{
  namespace Config_Handlers
  {
  }
}

#endif // PCD_HPP
