/*
 * This code was generated by the XML Schema Compiler.
 *
 * Changes made to this code will most likely be overwritten
 * when the handlers are recompiled.
 *
 * If you find errors or feel that there are bugfixes to be made,
 * please report this to the XSC project at
 * https://github.com/DOCGroup/XSC
 */
#include "cdp.hpp"

#include "ace/Null_Mutex.h"
#include "ace/TSS_T.h"
#include "ace/ace_wchar.h"
#include "ace/Singleton.h"

namespace DAnCE
{
  namespace Config_Handlers
  {
    // PlanSubcomponentPropertyReference

    PlanSubcomponentPropertyReference::PlanSubcomponentPropertyReference (::XMLSchema::string<ACE_TCHAR> const& propertyName__,
                                                                          ::DAnCE::Config_Handlers::InstanceDeploymentDescription const& instance__) :
    ::XSCRT::Type (),
    propertyName_ (new ::XMLSchema::string<ACE_TCHAR> (propertyName__)),
    instance_ (new ::DAnCE::Config_Handlers::InstanceDeploymentDescription (instance__)),
    regulator__ ()
    {
      propertyName_->container (this);
      instance_->container (this);
    }

    PlanSubcomponentPropertyReference::PlanSubcomponentPropertyReference (PlanSubcomponentPropertyReference const& s) :
    ::XSCRT::Type (s),
    propertyName_ (new ::XMLSchema::string<ACE_TCHAR> (*s.propertyName_)),
    instance_ (new ::DAnCE::Config_Handlers::InstanceDeploymentDescription (*s.instance_)),
    regulator__ ()
    {
      propertyName_->container (this);
      instance_->container (this);
    }

    PlanSubcomponentPropertyReference&
    PlanSubcomponentPropertyReference::operator= (PlanSubcomponentPropertyReference const& s)
    {
      if (&s != this)
      {
        propertyName (*s.propertyName_);

        instance (*s.instance_);
      }

      return *this;
    }


    // PlanSubcomponentPropertyReference
    ::XMLSchema::string<ACE_TCHAR> const& PlanSubcomponentPropertyReference::
    propertyName () const
    {
      return *propertyName_;
    }

    void PlanSubcomponentPropertyReference::
    propertyName (::XMLSchema::string<ACE_TCHAR> const& e)
    {
      *propertyName_ = e;
    }

    // PlanSubcomponentPropertyReference
    ::DAnCE::Config_Handlers::InstanceDeploymentDescription const& PlanSubcomponentPropertyReference::
    instance () const
    {
      return *instance_;
    }

    void PlanSubcomponentPropertyReference::
    instance (::DAnCE::Config_Handlers::InstanceDeploymentDescription const& e)
    {
      *instance_ = e;
    }


    // PlanPropertyMapping

    PlanPropertyMapping::PlanPropertyMapping (::XMLSchema::string<ACE_TCHAR> const& name__,
                                              ::XMLSchema::string<ACE_TCHAR> const& externalName__,
                                              delegatesTo_container_type const& delegatesTo__) :
    ::XSCRT::Type (),
    name_ (new ::XMLSchema::string<ACE_TCHAR> (name__)),
    externalName_ (new ::XMLSchema::string<ACE_TCHAR> (externalName__)),
    delegatesTo_ (delegatesTo__),
    regulator__ ()
    {
      name_->container (this);
      externalName_->container (this);
    }

    PlanPropertyMapping::PlanPropertyMapping (PlanPropertyMapping const& s) :
    ::XSCRT::Type (s),
    name_ (new ::XMLSchema::string<ACE_TCHAR> (*s.name_)),
    source_ (s.source_),
    externalName_ (new ::XMLSchema::string<ACE_TCHAR> (*s.externalName_)),
    delegatesTo_ (s.delegatesTo_),
    regulator__ ()
    {
      name_->container (this);
      externalName_->container (this);
    }

    PlanPropertyMapping&
    PlanPropertyMapping::operator= (PlanPropertyMapping const& s)
    {
      if (&s != this)
      {
        name (*s.name_);

        source_ = s.source_;

        externalName (*s.externalName_);

        delegatesTo_ = s.delegatesTo_;
      }

      return *this;
    }


    // PlanPropertyMapping
    ::XMLSchema::string<ACE_TCHAR> const& PlanPropertyMapping::
    name () const
    {
      return *name_;
    }

    void PlanPropertyMapping::
    name (::XMLSchema::string<ACE_TCHAR> const& e)
    {
      *name_ = e;
    }

    // PlanPropertyMapping
    PlanPropertyMapping::source_iterator PlanPropertyMapping::
    begin_source ()
    {
      return source_.begin ();
    }

    PlanPropertyMapping::source_iterator PlanPropertyMapping::
    end_source ()
    {
      return source_.end ();
    }

    PlanPropertyMapping::source_const_iterator PlanPropertyMapping::
    begin_source () const
    {
      return source_.begin ();
    }

    PlanPropertyMapping::source_const_iterator PlanPropertyMapping::
    end_source () const
    {
      return source_.end ();
    }

    void PlanPropertyMapping::
    add_source (PlanPropertyMapping::source_value_type const& e)
    {
      source_.push_back (e);
    }

    size_t PlanPropertyMapping::
    count_source(void) const
    {
      return source_.size ();
    }

    // PlanPropertyMapping
    ::XMLSchema::string<ACE_TCHAR> const& PlanPropertyMapping::
    externalName () const
    {
      return *externalName_;
    }

    void PlanPropertyMapping::
    externalName (::XMLSchema::string<ACE_TCHAR> const& e)
    {
      *externalName_ = e;
    }

    // PlanPropertyMapping
    PlanPropertyMapping::delegatesTo_iterator PlanPropertyMapping::
    begin_delegatesTo ()
    {
      return delegatesTo_.begin ();
    }

    PlanPropertyMapping::delegatesTo_iterator PlanPropertyMapping::
    end_delegatesTo ()
    {
      return delegatesTo_.end ();
    }

    PlanPropertyMapping::delegatesTo_const_iterator PlanPropertyMapping::
    begin_delegatesTo () const
    {
      return delegatesTo_.begin ();
    }

    PlanPropertyMapping::delegatesTo_const_iterator PlanPropertyMapping::
    end_delegatesTo () const
    {
      return delegatesTo_.end ();
    }

    void PlanPropertyMapping::
    add_delegatesTo (PlanPropertyMapping::delegatesTo_value_type const& e)
    {
      delegatesTo_.push_back (e);
    }

    size_t PlanPropertyMapping::
    count_delegatesTo(void) const
    {
      return delegatesTo_.size ();
    }


    // deploymentPlan

    deploymentPlan::deploymentPlan () :
    ::XSCRT::Type (),
    regulator__ ()
    {
    }

    deploymentPlan::deploymentPlan (deploymentPlan const& s) :
    ::XSCRT::Type (s),
    label_ (s.label_.get () ? new ::XMLSchema::string<ACE_TCHAR> (*s.label_) : 0),
    UUID_ (s.UUID_.get () ? new ::XMLSchema::string<ACE_TCHAR> (*s.UUID_) : 0),
    realizes_ (s.realizes_.get () ? new ::DAnCE::Config_Handlers::ComponentInterfaceDescription (*s.realizes_) : 0),
    implementation_ (s.implementation_),
    instance_ (s.instance_),
    connection_ (s.connection_),
    externalProperty_ (s.externalProperty_),
    dependsOn_ (s.dependsOn_),
    artifact_ (s.artifact_),
    infoProperty_ (s.infoProperty_),
    localityConstraint_ (s.localityConstraint_),
    regulator__ ()
    {
      if (label_.get ()) label_->container (this);
      if (UUID_.get ()) UUID_->container (this);
      if (realizes_.get ()) realizes_->container (this);
    }

    deploymentPlan&
    deploymentPlan::operator= (deploymentPlan const& s)
    {
      if (&s != this)
      {
        if (s.label_.get ())
          label (*(s.label_));
        else
          label_.reset (0);

        if (s.UUID_.get ())
          UUID (*(s.UUID_));
        else
          UUID_.reset (0);

        if (s.realizes_.get ())
          realizes (*(s.realizes_));
        else
          realizes_.reset (0);

        implementation_ = s.implementation_;

        instance_ = s.instance_;

        connection_ = s.connection_;

        externalProperty_ = s.externalProperty_;

        dependsOn_ = s.dependsOn_;

        artifact_ = s.artifact_;

        infoProperty_ = s.infoProperty_;

        localityConstraint_ = s.localityConstraint_;
      }

      return *this;
    }


    // deploymentPlan
    bool deploymentPlan::
    label_p () const
    {
      return label_.get () != 0;
    }

    ::XMLSchema::string<ACE_TCHAR> const& deploymentPlan::
    label () const
    {
      return *label_;
    }

    void deploymentPlan::
    label (::XMLSchema::string<ACE_TCHAR> const& e)
    {
      if (label_.get ())
      {
        *label_ = e;
      }

      else
      {
        label_ = deploymentPlan::label_auto_ptr_type (new ::XMLSchema::string<ACE_TCHAR> (e));
        label_->container (this);
      }
    }

    // deploymentPlan
    bool deploymentPlan::
    UUID_p () const
    {
      return UUID_.get () != 0;
    }

    ::XMLSchema::string<ACE_TCHAR> const& deploymentPlan::
    UUID () const
    {
      return *UUID_;
    }

    void deploymentPlan::
    UUID (::XMLSchema::string<ACE_TCHAR> const& e)
    {
      if (UUID_.get ())
      {
        *UUID_ = e;
      }

      else
      {
        UUID_ = deploymentPlan::UUID_auto_ptr_type (new ::XMLSchema::string<ACE_TCHAR> (e));
        UUID_->container (this);
      }
    }

    // deploymentPlan
    bool deploymentPlan::
    realizes_p () const
    {
      return realizes_.get () != 0;
    }

    ::DAnCE::Config_Handlers::ComponentInterfaceDescription const& deploymentPlan::
    realizes () const
    {
      return *realizes_;
    }

    void deploymentPlan::
    realizes (::DAnCE::Config_Handlers::ComponentInterfaceDescription const& e)
    {
      if (realizes_.get ())
      {
        *realizes_ = e;
      }

      else
      {
        realizes_ = deploymentPlan::realizes_auto_ptr_type (new ::DAnCE::Config_Handlers::ComponentInterfaceDescription (e));
        realizes_->container (this);
      }
    }

    // deploymentPlan
    deploymentPlan::implementation_iterator deploymentPlan::
    begin_implementation ()
    {
      return implementation_.begin ();
    }

    deploymentPlan::implementation_iterator deploymentPlan::
    end_implementation ()
    {
      return implementation_.end ();
    }

    deploymentPlan::implementation_const_iterator deploymentPlan::
    begin_implementation () const
    {
      return implementation_.begin ();
    }

    deploymentPlan::implementation_const_iterator deploymentPlan::
    end_implementation () const
    {
      return implementation_.end ();
    }

    void deploymentPlan::
    add_implementation (deploymentPlan::implementation_value_type const& e)
    {
      implementation_.push_back (e);
    }

    size_t deploymentPlan::
    count_implementation(void) const
    {
      return implementation_.size ();
    }

    // deploymentPlan
    deploymentPlan::instance_iterator deploymentPlan::
    begin_instance ()
    {
      return instance_.begin ();
    }

    deploymentPlan::instance_iterator deploymentPlan::
    end_instance ()
    {
      return instance_.end ();
    }

    deploymentPlan::instance_const_iterator deploymentPlan::
    begin_instance () const
    {
      return instance_.begin ();
    }

    deploymentPlan::instance_const_iterator deploymentPlan::
    end_instance () const
    {
      return instance_.end ();
    }

    void deploymentPlan::
    add_instance (deploymentPlan::instance_value_type const& e)
    {
      instance_.push_back (e);
    }

    size_t deploymentPlan::
    count_instance(void) const
    {
      return instance_.size ();
    }

    // deploymentPlan
    deploymentPlan::connection_iterator deploymentPlan::
    begin_connection ()
    {
      return connection_.begin ();
    }

    deploymentPlan::connection_iterator deploymentPlan::
    end_connection ()
    {
      return connection_.end ();
    }

    deploymentPlan::connection_const_iterator deploymentPlan::
    begin_connection () const
    {
      return connection_.begin ();
    }

    deploymentPlan::connection_const_iterator deploymentPlan::
    end_connection () const
    {
      return connection_.end ();
    }

    void deploymentPlan::
    add_connection (deploymentPlan::connection_value_type const& e)
    {
      connection_.push_back (e);
    }

    size_t deploymentPlan::
    count_connection(void) const
    {
      return connection_.size ();
    }

    // deploymentPlan
    deploymentPlan::externalProperty_iterator deploymentPlan::
    begin_externalProperty ()
    {
      return externalProperty_.begin ();
    }

    deploymentPlan::externalProperty_iterator deploymentPlan::
    end_externalProperty ()
    {
      return externalProperty_.end ();
    }

    deploymentPlan::externalProperty_const_iterator deploymentPlan::
    begin_externalProperty () const
    {
      return externalProperty_.begin ();
    }

    deploymentPlan::externalProperty_const_iterator deploymentPlan::
    end_externalProperty () const
    {
      return externalProperty_.end ();
    }

    void deploymentPlan::
    add_externalProperty (deploymentPlan::externalProperty_value_type const& e)
    {
      externalProperty_.push_back (e);
    }

    size_t deploymentPlan::
    count_externalProperty(void) const
    {
      return externalProperty_.size ();
    }

    // deploymentPlan
    deploymentPlan::dependsOn_iterator deploymentPlan::
    begin_dependsOn ()
    {
      return dependsOn_.begin ();
    }

    deploymentPlan::dependsOn_iterator deploymentPlan::
    end_dependsOn ()
    {
      return dependsOn_.end ();
    }

    deploymentPlan::dependsOn_const_iterator deploymentPlan::
    begin_dependsOn () const
    {
      return dependsOn_.begin ();
    }

    deploymentPlan::dependsOn_const_iterator deploymentPlan::
    end_dependsOn () const
    {
      return dependsOn_.end ();
    }

    void deploymentPlan::
    add_dependsOn (deploymentPlan::dependsOn_value_type const& e)
    {
      dependsOn_.push_back (e);
    }

    size_t deploymentPlan::
    count_dependsOn(void) const
    {
      return dependsOn_.size ();
    }

    // deploymentPlan
    deploymentPlan::artifact_iterator deploymentPlan::
    begin_artifact ()
    {
      return artifact_.begin ();
    }

    deploymentPlan::artifact_iterator deploymentPlan::
    end_artifact ()
    {
      return artifact_.end ();
    }

    deploymentPlan::artifact_const_iterator deploymentPlan::
    begin_artifact () const
    {
      return artifact_.begin ();
    }

    deploymentPlan::artifact_const_iterator deploymentPlan::
    end_artifact () const
    {
      return artifact_.end ();
    }

    void deploymentPlan::
    add_artifact (deploymentPlan::artifact_value_type const& e)
    {
      artifact_.push_back (e);
    }

    size_t deploymentPlan::
    count_artifact(void) const
    {
      return artifact_.size ();
    }

    // deploymentPlan
    deploymentPlan::infoProperty_iterator deploymentPlan::
    begin_infoProperty ()
    {
      return infoProperty_.begin ();
    }

    deploymentPlan::infoProperty_iterator deploymentPlan::
    end_infoProperty ()
    {
      return infoProperty_.end ();
    }

    deploymentPlan::infoProperty_const_iterator deploymentPlan::
    begin_infoProperty () const
    {
      return infoProperty_.begin ();
    }

    deploymentPlan::infoProperty_const_iterator deploymentPlan::
    end_infoProperty () const
    {
      return infoProperty_.end ();
    }

    void deploymentPlan::
    add_infoProperty (deploymentPlan::infoProperty_value_type const& e)
    {
      infoProperty_.push_back (e);
    }

    size_t deploymentPlan::
    count_infoProperty(void) const
    {
      return infoProperty_.size ();
    }

    // deploymentPlan
    deploymentPlan::localityConstraint_iterator deploymentPlan::
    begin_localityConstraint ()
    {
      return localityConstraint_.begin ();
    }

    deploymentPlan::localityConstraint_iterator deploymentPlan::
    end_localityConstraint ()
    {
      return localityConstraint_.end ();
    }

    deploymentPlan::localityConstraint_const_iterator deploymentPlan::
    begin_localityConstraint () const
    {
      return localityConstraint_.begin ();
    }

    deploymentPlan::localityConstraint_const_iterator deploymentPlan::
    end_localityConstraint () const
    {
      return localityConstraint_.end ();
    }

    void deploymentPlan::
    add_localityConstraint (deploymentPlan::localityConstraint_value_type const& e)
    {
      localityConstraint_.push_back (e);
    }

    size_t deploymentPlan::
    count_localityConstraint(void) const
    {
      return localityConstraint_.size ();
    }
  }
}

namespace DAnCE
{
  namespace Config_Handlers
  {
    // PlanSubcomponentPropertyReference

    PlanSubcomponentPropertyReference::
    PlanSubcomponentPropertyReference (::XSCRT::XML::Element<ACE_TCHAR> const& e)
    :Base (e), regulator__ ()
    {

      ::XSCRT::Parser<ACE_TCHAR> p (e);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element<ACE_TCHAR> e (p.next_element ());
        std::basic_string<ACE_TCHAR> n (::XSCRT::XML::uq_name (e.name ()));

        if (n == ACE_TEXT("propertyName"))
        {
          propertyName_ = PlanSubcomponentPropertyReference::propertyName_auto_ptr_type (new ::XMLSchema::string<ACE_TCHAR> (e));
          propertyName_->container (this);
        }

        else if (n == ACE_TEXT("instance"))
        {
          instance_ = PlanSubcomponentPropertyReference::instance_auto_ptr_type (new ::DAnCE::Config_Handlers::InstanceDeploymentDescription (e));
          instance_->container (this);
        }

        else
        {
        }
      }
    }

    // PlanPropertyMapping

    PlanPropertyMapping::
    PlanPropertyMapping (::XSCRT::XML::Element<ACE_TCHAR> const& e)
    :Base (e), regulator__ ()
    {

      ::XSCRT::Parser<ACE_TCHAR> p (e);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element<ACE_TCHAR> e (p.next_element ());
        std::basic_string<ACE_TCHAR> n (::XSCRT::XML::uq_name (e.name ()));

        if (n == ACE_TEXT("name"))
        {
          name_ = PlanPropertyMapping::name_auto_ptr_type (new ::XMLSchema::string<ACE_TCHAR> (e));
          name_->container (this);
        }

        else if (n == ACE_TEXT("source"))
        {
          source_value_type t (new ::XMLSchema::string<ACE_TCHAR> (e));
          add_source (t);
        }

        else if (n == ACE_TEXT("externalName"))
        {
          externalName_ = PlanPropertyMapping::externalName_auto_ptr_type (new ::XMLSchema::string<ACE_TCHAR> (e));
          externalName_->container (this);
        }

        else if (n == ACE_TEXT("delegatesTo"))
        {
          delegatesTo_value_type t (new ::DAnCE::Config_Handlers::PlanSubcomponentPropertyReference (e));
          add_delegatesTo (t);
        }

        else
        {
        }
      }
    }

    // deploymentPlan

    deploymentPlan::
    deploymentPlan (::XSCRT::XML::Element<ACE_TCHAR> const& e)
    :Base (e), regulator__ ()
    {

      ::XSCRT::Parser<ACE_TCHAR> p (e);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element<ACE_TCHAR> e (p.next_element ());
        std::basic_string<ACE_TCHAR> n (::XSCRT::XML::uq_name (e.name ()));

        if (n == ACE_TEXT("label"))
        {
          ::XMLSchema::string<ACE_TCHAR> t (e);
          label (t);
        }

        else if (n == ACE_TEXT("UUID"))
        {
          ::XMLSchema::string<ACE_TCHAR> t (e);
          UUID (t);
        }

        else if (n == ACE_TEXT("realizes"))
        {
          ::DAnCE::Config_Handlers::ComponentInterfaceDescription t (e);
          realizes (t);
        }

        else if (n == ACE_TEXT("implementation"))
        {
          implementation_value_type t (new ::DAnCE::Config_Handlers::MonolithicDeploymentDescription (e));
          add_implementation (t);
        }

        else if (n == ACE_TEXT("instance"))
        {
          instance_value_type t (new ::DAnCE::Config_Handlers::InstanceDeploymentDescription (e));
          add_instance (t);
        }

        else if (n == ACE_TEXT("connection"))
        {
          connection_value_type t (new ::DAnCE::Config_Handlers::PlanConnectionDescription (e));
          add_connection (t);
        }

        else if (n == ACE_TEXT("externalProperty"))
        {
          externalProperty_value_type t (new ::DAnCE::Config_Handlers::PlanPropertyMapping (e));
          add_externalProperty (t);
        }

        else if (n == ACE_TEXT("dependsOn"))
        {
          dependsOn_value_type t (new ::DAnCE::Config_Handlers::ImplementationDependency (e));
          add_dependsOn (t);
        }

        else if (n == ACE_TEXT("artifact"))
        {
          artifact_value_type t (new ::DAnCE::Config_Handlers::ArtifactDeploymentDescription (e));
          add_artifact (t);
        }

        else if (n == ACE_TEXT("infoProperty"))
        {
          infoProperty_value_type t (new ::DAnCE::Config_Handlers::Property (e));
          add_infoProperty (t);
        }

        else if (n == ACE_TEXT("localityConstraint"))
        {
          localityConstraint_value_type t (new ::DAnCE::Config_Handlers::PlanLocality (e));
          add_localityConstraint (t);
        }

        else
        {
        }
      }
    }
  }
}

namespace DAnCE
{
  namespace Config_Handlers
  {
  }
}

