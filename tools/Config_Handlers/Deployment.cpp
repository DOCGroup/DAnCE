/*
 * This code was generated by the XML Schema Compiler.
 *
 * Changes made to this code will most likely be overwritten
 * when the handlers are recompiled.
 *
 * If you find errors or feel that there are bugfixes to be made,
 * please report this to the XSC project at
 * https://github.com/DOCGroup/XSC
 */
#include "Deployment.hpp"

#include "ace/ace_wchar.h"
#include "ace/Null_Mutex.h"
#include "ace/TSS_T.h"
#include "ace/Singleton.h"

namespace DAnCE
{
  namespace Config_Handlers
  {
  }
}

namespace DAnCE
{
  namespace Config_Handlers
  {
  }
}

namespace DAnCE
{
  namespace Config_Handlers
  {
    namespace reader
    {
      ::DAnCE::Config_Handlers::Domain
      domain (xercesc::DOMDocument const* d)
      {
        // Initiate our Singleton as an ACE_TSS object (ensures thread
        // specific storage
        ID_Map::TSS_ID_Map* TSS_ID_Map (ACE_Singleton<ID_Map::TSS_ID_Map, ACE_Null_Mutex>::instance());
        xercesc::DOMElement* dom_element = d->getDocumentElement ();
        if (!dom_element)
        {
          throw 1;
        }

        ::XSCRT::XML::Element<ACE_TCHAR> e (dom_element);
        if (e.name () == ACE_TEXT("domain"))
        {
          ::DAnCE::Config_Handlers::Domain r (e);

          (*TSS_ID_Map)->resolve_idref();

          return r;
        }

        else
        {
          throw 1;
        }
      }
    }

    namespace reader
    {
      ::DAnCE::Config_Handlers::deploymentPlan
      DeploymentPlan (xercesc::DOMDocument const* d)
      {
        // Initiate our Singleton as an ACE_TSS object (ensures thread
        // specific storage
        ID_Map::TSS_ID_Map* TSS_ID_Map (ACE_Singleton<ID_Map::TSS_ID_Map, ACE_Null_Mutex>::instance());
        xercesc::DOMElement* dom_element = d->getDocumentElement ();
        if (!dom_element)
        {
          throw 1;
        }

        ::XSCRT::XML::Element<ACE_TCHAR> e (dom_element);
        if (e.name () == ACE_TEXT("DeploymentPlan"))
        {
          ::DAnCE::Config_Handlers::deploymentPlan r (e);

          (*TSS_ID_Map)->resolve_idref();

          return r;
        }

        else
        {
          throw 1;
        }
      }
    }

    namespace reader
    {
      ::DAnCE::Config_Handlers::ImplementationArtifactDescription
      implementationArtifactDescription (xercesc::DOMDocument const* d)
      {
        // Initiate our Singleton as an ACE_TSS object (ensures thread
        // specific storage
        ID_Map::TSS_ID_Map* TSS_ID_Map (ACE_Singleton<ID_Map::TSS_ID_Map, ACE_Null_Mutex>::instance());
        xercesc::DOMElement* dom_element = d->getDocumentElement ();
        if (!dom_element)
        {
          throw 1;
        }

        ::XSCRT::XML::Element<ACE_TCHAR> e (dom_element);
        if (e.name () == ACE_TEXT("implementationArtifactDescription"))
        {
          ::DAnCE::Config_Handlers::ImplementationArtifactDescription r (e);

          (*TSS_ID_Map)->resolve_idref();

          return r;
        }

        else
        {
          throw 1;
        }
      }
    }

    namespace reader
    {
      ::DAnCE::Config_Handlers::ComponentInterfaceDescription
      componentInterfaceDescription (xercesc::DOMDocument const* d)
      {
        // Initiate our Singleton as an ACE_TSS object (ensures thread
        // specific storage
        ID_Map::TSS_ID_Map* TSS_ID_Map (ACE_Singleton<ID_Map::TSS_ID_Map, ACE_Null_Mutex>::instance());
        xercesc::DOMElement* dom_element = d->getDocumentElement ();
        if (!dom_element)
        {
          throw 1;
        }

        ::XSCRT::XML::Element<ACE_TCHAR> e (dom_element);
        if (e.name () == ACE_TEXT("componentInterfaceDescription"))
        {
          ::DAnCE::Config_Handlers::ComponentInterfaceDescription r (e);

          (*TSS_ID_Map)->resolve_idref();

          return r;
        }

        else
        {
          throw 1;
        }
      }
    }

    namespace reader
    {
      ::DAnCE::Config_Handlers::ComponentImplementationDescription
      componentImplementationDescription (xercesc::DOMDocument const* d)
      {
        // Initiate our Singleton as an ACE_TSS object (ensures thread
        // specific storage
        ID_Map::TSS_ID_Map* TSS_ID_Map (ACE_Singleton<ID_Map::TSS_ID_Map, ACE_Null_Mutex>::instance());
        xercesc::DOMElement* dom_element = d->getDocumentElement ();
        if (!dom_element)
        {
          throw 1;
        }

        ::XSCRT::XML::Element<ACE_TCHAR> e (dom_element);
        if (e.name () == ACE_TEXT("componentImplementationDescription"))
        {
          ::DAnCE::Config_Handlers::ComponentImplementationDescription r (e);

          (*TSS_ID_Map)->resolve_idref();

          return r;
        }

        else
        {
          throw 1;
        }
      }
    }

    namespace reader
    {
      ::DAnCE::Config_Handlers::ComponentPackageDescription
      componentPackageDescription (xercesc::DOMDocument const* d)
      {
        // Initiate our Singleton as an ACE_TSS object (ensures thread
        // specific storage
        ID_Map::TSS_ID_Map* TSS_ID_Map (ACE_Singleton<ID_Map::TSS_ID_Map, ACE_Null_Mutex>::instance());
        xercesc::DOMElement* dom_element = d->getDocumentElement ();
        if (!dom_element)
        {
          throw 1;
        }

        ::XSCRT::XML::Element<ACE_TCHAR> e (dom_element);
        if (e.name () == ACE_TEXT("componentPackageDescription"))
        {
          ::DAnCE::Config_Handlers::ComponentPackageDescription r (e);

          (*TSS_ID_Map)->resolve_idref();

          return r;
        }

        else
        {
          throw 1;
        }
      }
    }

    namespace reader
    {
      ::DAnCE::Config_Handlers::PackageConfiguration
      packageConfiguration (xercesc::DOMDocument const* d)
      {
        // Initiate our Singleton as an ACE_TSS object (ensures thread
        // specific storage
        ID_Map::TSS_ID_Map* TSS_ID_Map (ACE_Singleton<ID_Map::TSS_ID_Map, ACE_Null_Mutex>::instance());
        xercesc::DOMElement* dom_element = d->getDocumentElement ();
        if (!dom_element)
        {
          throw 1;
        }

        ::XSCRT::XML::Element<ACE_TCHAR> e (dom_element);
        if (e.name () == ACE_TEXT("packageConfiguration"))
        {
          ::DAnCE::Config_Handlers::PackageConfiguration r (e);

          (*TSS_ID_Map)->resolve_idref();

          return r;
        }

        else
        {
          throw 1;
        }
      }
    }

    namespace reader
    {
      ::DAnCE::Config_Handlers::TopLevelPackageDescription
      topLevelPackageDescription (xercesc::DOMDocument const* d)
      {
        // Initiate our Singleton as an ACE_TSS object (ensures thread
        // specific storage
        ID_Map::TSS_ID_Map* TSS_ID_Map (ACE_Singleton<ID_Map::TSS_ID_Map, ACE_Null_Mutex>::instance());
        xercesc::DOMElement* dom_element = d->getDocumentElement ();
        if (!dom_element)
        {
          throw 1;
        }

        ::XSCRT::XML::Element<ACE_TCHAR> e (dom_element);
        if (e.name () == ACE_TEXT("topLevelPackageDescription"))
        {
          ::DAnCE::Config_Handlers::TopLevelPackageDescription r (e);

          (*TSS_ID_Map)->resolve_idref();

          return r;
        }

        else
        {
          throw 1;
        }
      }
    }
  }
}

