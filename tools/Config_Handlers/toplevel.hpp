/*
 * This code was generated by the XML Schema Compiler.
 *
 * Changes made to this code will most likely be overwritten
 * when the handlers are recompiled.
 *
 * If you find errors or feel that there are bugfixes to be made,
 * please report this to the XSC project at
 * https://github.com/DOCGroup/XSC
 */
#ifndef TOPLEVEL_HPP
#define TOPLEVEL_HPP

#include "XSC_XML_Handlers_Export.h"
// Forward declarations.
namespace DAnCE
{
  namespace Config_Handlers
  {
    class TopLevelPackageDescription;
  }
}

#include <memory>
#include <string>
#include <list>
#include "ace/XML_Utils/XMLSchema/Types.hpp"
#include "ace/XML_Utils/XMLSchema/id_map.hpp"
#include "ace/Refcounted_Auto_Ptr.h"
#include "ace/Null_Mutex.h"
#include "ace/ace_wchar.h"

#if !defined(XML_XSC_SMART_PTR)
# if defined(ACE_HAS_CPP11)
#   define XML_XSC_SMART_PTR(X) std::unique_ptr<X>
# else
#   define XML_XSC_SMART_PTR(X) std::auto_ptr<X>
# endif
#endif

#include "pcd.hpp"

namespace DAnCE
{
  namespace Config_Handlers
  {
    class XSC_XML_Handlers_Export TopLevelPackageDescription : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::TopLevelPackageDescription, ACE_Null_Mutex> _ptr;

      // package
      public:
      typedef ACE_Refcounted_Auto_Ptr < ::DAnCE::Config_Handlers::PackageConfiguration, ACE_Null_Mutex> package_value_type;
      typedef std::list<package_value_type> package_container_type;
      typedef package_container_type::iterator package_iterator;
      typedef package_container_type::const_iterator package_const_iterator;
      package_iterator begin_package ();
      package_iterator end_package ();
      package_const_iterator begin_package () const;
      package_const_iterator end_package () const;
      void add_package (package_value_type const&);
      size_t count_package () const;

      protected:
      package_container_type package_;

      public:
      TopLevelPackageDescription ();

      explicit TopLevelPackageDescription (::XSCRT::XML::Element<ACE_TCHAR> const&);
      TopLevelPackageDescription (TopLevelPackageDescription const& s);
      TopLevelPackageDescription& operator= (TopLevelPackageDescription const& s);
    };
  }
}

namespace DAnCE
{
  namespace Config_Handlers
  {
  }
}

#endif // TOPLEVEL_HPP
